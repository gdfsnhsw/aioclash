#!/bin/bash

end="\033[0m"
black="\033[0;30m"
blackb="\033[1;30m"
white="\033[0;37m"
whiteb="\033[1;37m"
red="\033[0;31m"
redb="\033[1;31m"
green="\033[0;32m"
greenb="\033[1;32m"
yellow="\033[0;33m"
yellowb="\033[1;33m"
blue="\033[0;34m"
blueb="\033[1;34m"
purple="\033[0;35m"
purpleb="\033[1;35m"
lightblue="\033[0;36m"
lightblueb="\033[1;36m"

sh_ver="1.4.2"

url_cdn="https://gh.168828.xyz/"

cpu=$(hostnamectl | grep Architecture: | awk '{print $2}')
system=$(cat /etc/issue | awk '{print $1}')
gateway=$(cat /etc/network/interfaces |grep gateway | awk '{print $2}' | head -n 1)
netmask=$(cat /etc/network/interfaces |grep netmask | awk '{print $2}' | head -n 1)
local_ip=$(ip a 2>&1 | grep -w 'inet' | grep 'global' | grep -E '\ 1(92|0|72|00|1)\.' | sed 's/.*inet.//g' | sed 's/\/[0-9][0-9].*$//g' | head -n 1);
eth_n=$(ip --oneline link show up | grep -v "lo" | awk '{print$2;exit}' | cut -d':' -f1 | cut -d'@' -f1)

AIOCLASH_PATH="/srv"
aioclash_path="/usr/bin/aioclash"

CLASH_PATH="${AIOCLASH_PATH}/clash"
CLASH_CORE_PATH="/usr/bin"
clash_bin="${CLASH_CORE_PATH}/clash"
clash_version_file="${CLASH_PATH}/version_clash"

MOSDNS_PATH="${AIOCLASH_PATH}/mosdns"
MOSDNS_CORE_PATH="/usr/bin"
mosdns_bin="${MOSDNS_CORE_PATH}/mosdns"
mosdns_version_file="${MOSDNS_PATH}/version_mosdns"

SUBCONVERTER_PATH="${AIOCLASH_PATH}/subconverter"
SUBCONVERTER_CORE_PATH="${AIOCLASH_PATH}/subconverter"
subconverter_bin="${SUBCONVERTER_CORE_PATH}/subconverter"
subconverter_version_file="${SUBCONVERTER_PATH}/version_subconverter"

# subconverter配置档案
formyairport_path="${SUBCONVERTER_PATH}/profiles/formyairport.ini"
# subconverter配置档案备份
bak_formyairport_path="${SUBCONVERTER_PATH}/profiles/formyairport.ini.bak"
# clash配置文件
yaml_path="$CLASH_PATH/config.yaml"
# clash配置文件备份
bak_yaml_path="$CLASH_PATH/config.yaml.bak"
# clash配置文件新建
new_yaml_path="/tmp/clash_config.yaml"

setconfig(){
    #参数1代表变量名，参数2代表变量值,参数3即文件路径
    [ -z "$3" ] && configpath=$formyairport_path || configpath=$3
    [ -n "$(grep ${1} $configpath)" ] && sed -i "s#${1}=.*#${1}=${2}#g" $configpath || echo "${1}=${2}" >> $configpath
}

webget2(){
    #参数【$1】代表下载目录，【$2】代表在线地址
    #参数【$3】代表输出显示，【$4】不启用重定向
    if curl --version > /dev/null 2>&1;then
      [ "$3" = "echooff" ] && progress='-s' || progress='-#'
      [ -z "$4" ] && redirect='-L' || redirect=''
      result=$(curl -w %{http_code} --connect-timeout 5 $progress $redirect -ko $1 $2)
    else
      if wget --version > /dev/null 2>&1;then
        [ "$3" = "echooff" ] && progress='-q' || progress='-q --show-progress'
        [ "$4" = "rediroff" ] && redirect='--max-redirect=0' || redirect=''
        certificate='--no-check-certificate'
        timeout='--timeout=3'
      fi
    [ "$3" = "echoon" ] && progress=''
    [ "$3" = "echooff" ] && progress='-q'
    wget $progress $redirect $certificate $timeout -O $1 $2 
    [ $? -eq 0 ] && result="200"
    fi
}

croncmd(){
	if [ -n "$(crontab -h 2>&1 | grep '\-l')" ];then
		crontab $1
	else
		crondir="$(crond -h 2>&1 | grep -oE 'Default:.*' | awk -F ":" '{print $2}')"
		[ ! -w "$crondir" ] && crondir="/etc/storage/cron/crontabs"
		[ ! -w "$crondir" ] && crondir="/var/spool/cron/crontabs"
		[ ! -w "$crondir" ] && crondir="/var/spool/cron"
		[ ! -w "$crondir" ] && echo "你的设备不支持定时任务配置，脚本大量功能无法启用！"
		[ "$1" = "-l" ] && cat $crondir/$USER 2>/dev/null
		[ -f "$1" ] && cat $1 > $crondir/$USER
	fi
}

cronset(){
    # 参数1代表要移除的关键字,参数2代表要添加的任务语句
    tmpcron=/tmp/cron_$USER
    croncmd -l > $tmpcron 
    sed -i "/$1/d" $tmpcron
    sed -i '/^$/d' $tmpcron
    echo "$2" >> $tmpcron
    croncmd $tmpcron
    rm -f $tmpcron
}

verlte() {
    [  "$1" = "`echo -e "$1\n$2" | sort -V | head -n1`" ]
}
verlt() {
    [ "$1" = "$2" ] && return 1 || verlte $1 $2
}

# check root
[[ $EUID -ne 0 ]] && echo -e "${red}错误:  必须使用root用户运行此脚本!\n${end}" && exit 1

# check os
if cat /etc/issue | grep -Eqi "debian"; then
    release="debian"
elif cat /etc/issue | grep -Eqi "Armbian"; then
    release="Armbian"
else
    echo -e "${red}请使用 Debian或Armbian 系统!\n${end}" && exit 1
fi

os_version=""

# os version
if [[ -f /etc/os-release ]]; then
    os_version=$(awk -F'[= ."]' '/VERSION_ID/{print $3}' /etc/os-release)
fi
if [[ -z "$os_version" && -f /etc/lsb-release ]]; then
    os_version=$(awk -F'[= ."]+' '/DISTRIB_RELEASE/{print $2}' /etc/lsb-release)
fi

if [[ x"${release}" == x"debian" ]]; then
    if [[ ${os_version} -lt 10 ]]; then
        echo -e "${red}请使用 Debian 10 或更高版本的系统!\n${end}" && exit 1
    fi
fi

confirm() {
    if [[ $# > 1 ]]; then
        echo && read -e -p "$1 [默认$2]: " temp
        if [[ x"${temp}" == x"" ]]; then
            temp=$2
        fi
    else
        read -e -p "$1 [y/n]: " temp
    fi
    if [[ x"${temp}" == x"y" || x"${temp}" == x"Y" ]]; then
        return 0
    else
        return 1
    fi
}

supervisor_config() {
    cat << EOF > /etc/supervisor/supervisord.conf
; supervisor config file
[unix_http_server]
file=/var/run/supervisor.sock                   ;UNIX socket 文件，supervisorctl 会使用
chmod=0700                                      ;socket文件的mode，默认是0700
;chown=nobody:nogroup                           ;socket文件的owner，格式:uid:gid
;[inet_http_server]                             ;HTTP服务器，提供web管理界面
;port=0.0.0.0:9089                              ;Web管理后台运行的IP和端口，如果开放到公网，需要注意安全性
;username=admin                                 ;登录管理后台的用户名
;password=admin                                 ;登录管理后台的密码
[supervisord]
logfile=/tmp/supervisord.log                    ;日志文件，默认是 supervisord.log
pidfile=/var/run/supervisord.pid                ;pid 文件
childlogdir=/var/log/supervisor
[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface
[supervisorctl]
serverurl=unix:///var/run/supervisor.sock       ;通过UNIX socket连接supervisord，路径与unix_http_server部分的file一致
;serverurl=http://127.0.0.1:9088                ;通过HTTP的方式连接supervisord
[include]
files = /etc/supervisor/conf.d/*.conf
EOF
    sudo supervisorctl update >> /dev/null 2>&1
    sudo supervisorctl reload >> /dev/null 2>&1
}

supervisor_clash_config() {
    cat << EOF > /etc/supervisor/conf.d/clash.conf
[program:clash]                                             ;管理clash进程
user=root                                                   ;启动进程用户，默认是root
command=${clash_bin} -d ${CLASH_PATH}/                      ;程序启动命令
autostart=true                                              ;在supervisord启动的时候也自动启动
startsecs=10                                                ;启动后确认无异常时间
autorestart=true                                            ;程序退出后自动重启,可选值:[unexpected,true,false]，默认为unexpected，表示进程意外杀死后才重启
startretries=3                                              ;启动失败自动重试次数，默认是3
redirect_stderr=true                                        ;把stderr重定向到stdout，默认false
stdout_logfile_maxbytes=20MB                                ;stdout 日志文件大小，默认50MB
stdout_logfile_backups = 5                                  ;stdout 日志文件备份数，默认是10
stdout_logfile=/tmp/clash.log                               ;stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）
EOF
}

supervisor_mosdns_config() {
    cat << EOF > /etc/supervisor/conf.d/mosdns.conf
[program:mosdns]                                            ;管理mosdns进程
user=root                                                   ;启动进程用户，默认是root
command=${mosdns_bin} -dir ${MOSDNS_PATH}/ -c config.yaml   ;程序启动命令
autostart=true                                              ;在supervisord启动的时候也自动启动
startsecs=10                                                ;启动后确认无异常时间
autorestart=true                                            ;程序退出后自动重启,可选值:[unexpected,true,false]，默认为unexpected，表示进程意外杀死后才重启
startretries=3                                              ;启动失败自动重试次数，默认是3
redirect_stderr=true                                        ;把stderr重定向到stdout，默认false
stdout_logfile_maxbytes=20MB                                ;stdout 日志文件大小，默认50MB
stdout_logfile_backups = 5                                  ;stdout 日志文件备份数，默认是10
stdout_logfile=/tmp/mosdns.log                             ;stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）
EOF
}

supervisor_subconverter_config() {
    cat << EOF > /etc/supervisor/conf.d/subconverter.conf
[program:subconverter]                                      ;管理subconverter进程
user=root                                                   ;启动进程用户，默认是root
command=${subconverter_bin}                                 ;程序启动命令
autostart=true                                              ;在supervisord启动的时候也自动启动
startsecs=10                                                ;启动后确认无异常时间
autorestart=true                                            ;程序退出后自动重启,可选值:[unexpected,true,false]，默认为unexpected，表示进程意外杀死后才重启
startretries=3                                              ;启动失败自动重试次数，默认是3
redirect_stderr=true                                        ;把stderr重定向到stdout，默认false
stdout_logfile_maxbytes=20MB                                ;stdout 日志文件大小，默认50MB
stdout_logfile_backups = 5                                  ;stdout 日志文件备份数，默认是10
stdout_logfile=/tmp/subconverter.log                       ;stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）
EOF
}

set_clash_config() {
    if [ ! -d "${CLASH_PATH}" ]; then
      mkdir ${CLASH_PATH}
    fi  
  cat << EOF > ${CLASH_PATH}/config.yaml
mixed-port: 7891
redir-port: 7892
tproxy-port: 7893
authentication:
  - user:pass
allow-lan: true
bind-address: "*"
mode: script
log-level: info
ipv6: false
external-controller: 0.0.0.0:9090
external-ui: dashboard
secret: ""
interface-name: $eth_n
routing-mark: 6666
profile:
  store-selected: true
  tracing: true
  store-fake-ip: true
hosts:
  mtalk.google.com: 108.177.125.188
  dl.google.com: 180.163.151.161
  dl.l.google.com: 180.163.151.161
tun:
  enable: true
  stack: system
  dns-hijack:
    - 22.0.0.2:53
dns:
  enable: true
  ipv6: false
  listen: 127.0.0.1:5352
  default-nameserver:
    - 223.5.5.5
    - 8.8.8.8
  enhanced-mode: fake-ip
  fake-ip-range: 22.0.0.0/8
  use-hosts: true
  fake-ip-filter:
    - "*.example"
    - "*.home.arpa"
    - "*.invalid"
    - "*.lan"
    - "*.local"
    - "*.localdomain"
    - "*.localhost"
    - "*.test"
    - mesu.apple.com
    - swscan.apple.com
    - "*.router.asus.com"
    - lens.l.google.com
    - stun.l.google.com
    - proxy.golang.org
    - "*.linksys.com"
    - "*.linksyssmartwifi.com"
    - "*.ipv6.microsoft.com"
    - "*.msftconnecttest.com"
    - "*.msftncsi.com"
    - msftconnecttest.com
    - msftncsi.com
    - ntp.*.com
    - ntp1.*.com
    - ntp2.*.com
    - ntp3.*.com
    - ntp4.*.com
    - ntp5.*.com
    - ntp6.*.com
    - ntp7.*.com
    - time.*.apple.com
    - time.*.com
    - time.*.gov
    - time1.*.com
    - time2.*.com
    - time3.*.com
    - time4.*.com
    - time5.*.com
    - time6.*.com
    - time7.*.com
    - time.*.edu.cn
    - "*.time.edu.cn"
    - "*.ntp.org.cn"
    - +.pool.ntp.org
    - time1.cloud.tencent.com
    - speedtest.cros.wr.pvp.net
    - "*.*.xboxlive.com"
    - xbox.*.*.microsoft.com
    - xbox.*.microsoft.com
    - xnotify.xboxlive.com
    - "*.*.*.srv.nintendo.net"
    - +.srv.nintendo.net
    - "*.*.stun.playstation.net"
    - +.stun.playstation.net
    - +.stun.*.*.*.*
    - +.stun.*.*.*
    - +.stun.*.*
    - stun.*.*.*
    - stun.*.*
    - "*.music.migu.cn"
    - music.migu.cn
    - music.taihe.com
    - musicapi.taihe.com
    - songsearch.kugou.com
    - trackercdn.kugou.com
    - "*.kuwo.cn"
    - api-jooxtt.sanook.com
    - api.joox.com
    - joox.com
    - y.qq.com
    - "*.y.qq.com"
    - amobile.music.tc.qq.com
    - aqqmusic.tc.qq.com
    - mobileoc.music.tc.qq.com
    - streamoc.music.tc.qq.com
    - dl.stream.qqmusic.qq.com
    - isure.stream.qqmusic.qq.com
    - music.163.com
    - "*.music.163.com"
    - "*.126.net"
    - "*.xiami.com"
    - localhost.ptlogin2.qq.com
    - localhost.sec.qq.com
    - "*.mcdn.bilivideo.cn"
  nameserver:
    - 223.5.5.5
proxy-providers:
  AllProxy:
    type: http
    url: "http://127.0.0.1:25500/getprofile?name=profiles/formyairport.ini&token=password&list=true" 
    interval: 3600
    path: ./Proxy/AllProxy.yaml
    health-check:
      enable: true
      interval: 600
      url: http://connectivitycheck.gstatic.com/generate_204
  # HK:
  #   type: file
  #   interval: 3600
  #   path: ./Proxy/AllProxy.yaml
  #   filter: '香港'
  #   health-check:
  #     enable: true
  #     interval: 120
  #     url: http://connectivitycheck.gstatic.com/generate_204
  # TW:
  #   type: file
  #   interval: 3600
  #   path: ./Proxy/AllProxy.yaml
  #   filter: '台湾'
  #   health-check:
  #     enable: true
  #     interval: 120
  #     url: http://connectivitycheck.gstatic.com/generate_204
  # UA:
  #   type: file
  #   interval: 3600
  #   path: ./Proxy/AllProxy.yaml
  #   filter: '美国'
  #   health-check:
  #     enable: true
  #     interval: 120
  #     url: http://connectivitycheck.gstatic.com/generate_204
  # JP:
  #   type: file
  #   interval: 3600
  #   path: ./Proxy/AllProxy.yaml
  #   filter: '日本'
  #   health-check:
  #     enable: true
  #     interval: 120
  #     url: http://connectivitycheck.gstatic.com/generate_204
  # SG:
  #   type: file
  #   interval: 3600
  #   path: ./Proxy/AllProxy.yaml
  #   filter: '新加坡'
  #   health-check:
  #     enable: true
  #     interval: 120
  #     url: http://connectivitycheck.gstatic.com/generate_204
  # KR:
  #   type: file
  #   interval: 3600
  #   path: ./Proxy/AllProxy.yaml
  #   filter: '韩国'
  #   health-check:
  #     enable: true
  #     interval: 120
  #     url: http://connectivitycheck.gstatic.com/generate_204
  # Netflix:
  #   type: file
  #   interval: 3600
  #   path: ./Proxy/AllProxy.yaml
  #   filter: 'Netflix'
  #   health-check:
  #     enable: true
  #     interval: 120
  #     url: http://connectivitycheck.gstatic.com/generate_204
  # SPECIAL:
  #   type: file
  #   interval: 3600
  #   path: ./Proxy/AllProxy.yaml
  #   filter: 'IEPL|IPLC'
  #   health-check:
  #     enable: true
  #     interval: 120
  #     url: http://connectivitycheck.gstatic.com/generate_204
proxy-groups:
  - name: 🚀 节点选择
    type: select
    proxies:
      - 🌀 手动切换
      - 🇭🇰 香港节点
      - 🇨🇳 台湾节点
      - 🇸🇬 新加坡节点
      - 🇯🇵 日本节点
      - 🇺🇲 美国节点
      - 🇰🇷 韩国节点
      - 🧩 专用线路
      - 🎯 全球直连
  - name: 🌀 手动切换
    type: select
    use:
      - AllProxy
  - name: 📲 Telegram
    type: select
    proxies:
      - 🚀 节点选择
      - 🇸🇬 新加坡节点
      - 🇭🇰 香港节点
      - 🇨🇳 台湾节点
      - 🇯🇵 日本节点
      - 🇺🇲 美国节点
      - 🇰🇷 韩国节点
      - 🧩 专用线路
      - 🌀 手动切换
      - 🎯 全球直连
  - name: 📹 Youtube
    type: select
    proxies:
      - 🚀 节点选择
      - 🇸🇬 新加坡节点
      - 🇭🇰 香港节点
      - 🇨🇳 台湾节点
      - 🇯🇵 日本节点
      - 🇺🇲 美国节点
      - 🇰🇷 韩国节点
      - 🧩 专用线路
      - 🌀 手动切换
      - 🎯 全球直连
  - name: 🎥 Netflix
    type: select
    proxies:
      - 🎥 奈飞节点
      - 🚀 节点选择
      - 🇸🇬 新加坡节点
      - 🇭🇰 香港节点
      - 🇨🇳 台湾节点
      - 🇯🇵 日本节点
      - 🇺🇲 美国节点
      - 🇰🇷 韩国节点
      - 🧩 专用线路
      - 🌀 手动切换
      - 🎯 全球直连
  - name: 🛩 SpeedTest
    type: select
    proxies:
      - 🎯 全球直连
      - 🚀 节点选择
      - 🇸🇬 新加坡节点
      - 🇭🇰 香港节点
      - 🇨🇳 台湾节点
      - 🇯🇵 日本节点
      - 🇺🇲 美国节点
      - 🇰🇷 韩国节点
      - 🧩 专用线路
      - 🌀 手动切换
  - name: 📺 巴哈姆特
    type: select
    proxies:
      - 🇨🇳 台湾节点
      - 🚀 节点选择
      - 🧩 专用线路
      - 🌀 手动切换
      - 🎯 全球直连
  - name: 🌍 国外媒体
    type: select
    proxies:
      - 🚀 节点选择
      - 🇭🇰 香港节点
      - 🇨🇳 台湾节点
      - 🇸🇬 新加坡节点
      - 🇯🇵 日本节点
      - 🇺🇲 美国节点
      - 🇰🇷 韩国节点
      - 🧩 专用线路
      - 🌀 手动切换
      - 🎯 全球直连
  - name: 🌏 国内媒体
    type: select
    proxies:
      - 🎯 全球直连
      - 🇭🇰 香港节点
      - 🇨🇳 台湾节点
      - 🇸🇬 新加坡节点
      - 🇯🇵 日本节点
      - 🧩 专用线路
      - 🌀 手动切换
  - name: 🌏 出海媒体
    type: select
    proxies:
      - 🎯 全球直连
      - 🇭🇰 香港节点
      - 🇨🇳 台湾节点
      - 🇸🇬 新加坡节点
      - 🇯🇵 日本节点
      - 🧩 专用线路
      - 🌀 手动切换
  - name: 📢 谷歌FCM
    type: select
    proxies:
      - 🚀 节点选择
      - 🇺🇲 美国节点
      - 🇭🇰 香港节点
      - 🇨🇳 台湾节点
      - 🇸🇬 新加坡节点
      - 🇯🇵 日本节点
      - 🇰🇷 韩国节点
      - 🧩 专用线路
      - 🌀 手动切换
      - 🎯 全球直连
  - name: Ⓜ️ 微软云盘
    type: select
    proxies:
      - 🚀 节点选择
      - 🇺🇲 美国节点
      - 🇭🇰 香港节点
      - 🇨🇳 台湾节点
      - 🇸🇬 新加坡节点
      - 🇯🇵 日本节点
      - 🇰🇷 韩国节点
      - 🧩 专用线路
      - 🌀 手动切换
      - 🎯 全球直连
  - name: 🍎 苹果服务
    type: select
    proxies:
      - 🚀 节点选择
      - 🇺🇲 美国节点
      - 🇭🇰 香港节点
      - 🇨🇳 台湾节点
      - 🇸🇬 新加坡节点
      - 🇯🇵 日本节点
      - 🇰🇷 韩国节点
      - 🧩 专用线路
      - 🌀 手动切换
      - 🎯 全球直连
  - name: 🎮 国际游戏
    type: select
    proxies:
      - 🚀 节点选择
      - 🇺🇲 美国节点
      - 🇭🇰 香港节点
      - 🇨🇳 台湾节点
      - 🇸🇬 新加坡节点
      - 🇯🇵 日本节点
      - 🇰🇷 韩国节点
      - 🧩 专用线路
      - 🌀 手动切换
      - 🎯 全球直连
  - name: 🎶 网易音乐
    type: select
    proxies:
      - 🎯 全球直连
      - 🚀 节点选择
  - name: 🐟 漏网之鱼
    type: select
    proxies:
      - 🚀 节点选择
      - 🎯 全球直连
      - 🇭🇰 香港节点
      - 🇨🇳 台湾节点
      - 🇸🇬 新加坡节点
      - 🇯🇵 日本节点
      - 🇺🇲 美国节点
      - 🇰🇷 韩国节点
      - 🌀 手动切换
  - name: 🎥 奈飞节点
    type: select
    use:
      # - Netflix
    proxies:
      - DIRECT
  - name: 🧩 专用线路
    type: select
    use:
      # - SPECIAL
    proxies:
      - DIRECT
  - name: 🇭🇰 香港节点
    type: url-test
    url: http://connectivitycheck.gstatic.com/generate_204
    interval: 180
    tolerance: 60
    use:
      # - HK
    proxies:
      - REJECT
  - name: 🇨🇳 台湾节点
    type: url-test
    url: http://connectivitycheck.gstatic.com/generate_204
    interval: 180
    tolerance: 60
    use:
      # - TW
    proxies:
      - REJECT
  - name: 🇺🇲 美国节点
    type: url-test
    url: http://connectivitycheck.gstatic.com/generate_204
    interval: 180
    tolerance: 60
    use:
      # - UA
    proxies:
      - REJECT
  - name: 🇯🇵 日本节点
    type: url-test
    url: http://connectivitycheck.gstatic.com/generate_204
    interval: 180
    tolerance: 60
    use:
      # - JP
    proxies:
      - REJECT
  - name: 🇸🇬 新加坡节点
    type: url-test
    url: http://connectivitycheck.gstatic.com/generate_204
    interval: 180
    tolerance: 60
    use:
      # - SG
    proxies:
      - REJECT
  - name: 🇰🇷 韩国节点
    type: url-test
    url: http://connectivitycheck.gstatic.com/generate_204
    interval: 180
    tolerance: 60
    use:
      # - KR
    proxies:
      - REJECT
  - name: 🎯 全球直连
    type: select
    proxies:
      - DIRECT
  - name: 🛑 广告拦截
    type: select
    proxies:
      - REJECT
      - DIRECT
  - name: 🍃 应用净化
    type: select
    proxies:
      - REJECT
      - DIRECT
rule-providers:
  LocalAreaNetwork:
    type: http
    behavior: classical
    url: ${url_cdn}https://raw.githubusercontent.com/gdfsnhsw/ACL4SSR/master/Clash/Providers/LocalAreaNetwork.yaml
    path: ./providers/LocalAreaNetwork.yaml
    interval: 86400
  UnBan:
    type: http
    behavior: classical
    url: ${url_cdn}https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/UnBan.yaml
    path: ./providers/UnBan.yaml
    interval: 86400
  BanAD:
    type: http
    behavior: classical
    url: ${url_cdn}https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/BanAD.yaml
    path: ./providers/BanAD.yaml
    interval: 86400
  BanProgramAD:
    type: http
    behavior: classical
    url: ${url_cdn}https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/BanProgramAD.yaml
    path: ./providers/BanProgramAD.yaml
    interval: 86400
  SpeedTest:
    type: http
    behavior: classical
    url: ${url_cdn}https://raw.githubusercontent.com/LM-Firefly/Rules/master/Clash-RuleSet-Classical/SpeedTest.yaml
    path: ./providers/SpeedTest.yaml
    interval: 86400
  GoogleFCM:
    type: http
    behavior: classical
    url: ${url_cdn}https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/GoogleFCM.yaml
    path: ./providers/GoogleFCM.yaml
    interval: 86400
  GoogleCN:
    type: http
    behavior: classical
    url: ${url_cdn}https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/GoogleCN.yaml
    path: ./providers/GoogleCN.yaml
    interval: 86400
  OneDrive:
    type: http
    behavior: classical
    url: ${url_cdn}https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/OneDrive.yaml
    path: ./providers/OneDrive.yaml
    interval: 86400
  Apple:
    type: http
    behavior: classical
    url: ${url_cdn}https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/Apple.yaml
    path: ./providers/Apple.yaml
    interval: 86400
  Telegram:
    type: http
    behavior: classical
    url: ${url_cdn}https://raw.githubusercontent.com/gdfsnhsw/ACL4SSR/master/Clash/Providers/Ruleset/Telegram.yaml
    path: ./providers/Telegram.yaml
    interval: 86400
  NetEaseMusic:
    type: http
    behavior: classical
    url: ${url_cdn}https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/NetEaseMusic.yaml
    path: ./providers/NetEaseMusic.yaml
    interval: 86400
  Epic:
    type: http
    behavior: classical
    url: ${url_cdn}https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/Epic.yaml
    path: ./providers/Epic.yaml
    interval: 86400
  Sony:
    type: http
    behavior: classical
    url: ${url_cdn}https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/Sony.yaml
    path: ./providers/Sony.yaml
    interval: 86400
  Steam:
    type: http
    behavior: classical
    url: ${url_cdn}https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/Steam.yaml
    path: ./providers/Steam.yaml
    interval: 86400
  YouTube:
    type: http
    behavior: classical
    url: ${url_cdn}https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/YouTube.yaml
    path: ./providers/YouTube.yaml
    interval: 86400
  Netflix:
    type: http
    behavior: classical
    url: ${url_cdn}https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/Netflix.yaml
    path: ./providers/Netflix.yaml
    interval: 86400
  Bahamut:
    type: http
    behavior: classical
    url: ${url_cdn}https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/Bahamut.yaml
    path: ./providers/Bahamut.yaml
    interval: 86400
  ChinaMedia:
    type: http
    behavior: classical
    url: ${url_cdn}https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/ChinaMedia.yaml
    path: ./providers/ChinaMedia.yaml
    interval: 86400
  ProxyMedia:
    type: http
    behavior: classical
    url: ${url_cdn}https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/ProxyMedia.yaml
    path: ./providers/ProxyMedia.yaml
    interval: 86400
  BilibiliHMT:
    type: http
    behavior: classical
    url: ${url_cdn}https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/BilibiliHMT.yaml
    path: ./providers/BilibiliHMT.yaml
    interval: 86400
  ProxyGFWlist:
    type: http
    behavior: classical
    url: ${url_cdn}https://raw.githubusercontent.com/gdfsnhsw/ACL4SSR/master/Clash/Providers/ProxyGFWlist.yaml
    path: ./providers/ProxyGFWlist.yaml
    interval: 86400
  ChinaIp:
    type: http
    behavior: ipcidr
    url: ${url_cdn}https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/ChinaIp.yaml
    path: ./providers/ChinaIp.yaml
    interval: 86400
  ChinaDomain:
    type: http
    behavior: domain
    url: ${url_cdn}https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/ChinaDomain.yaml
    path: ./providers/ChinaDomain.yaml
    interval: 86400
  ChinaCompanyIp:
    type: http
    behavior: ipcidr
    url: ${url_cdn}https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/ChinaCompanyIp.yaml
    path: ./providers/ChinaCompanyIp.yaml
    interval: 86400
  Download:
    type: http
    behavior: classical
    url: ${url_cdn}https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Download.yaml
    path: ./providers/Download.yaml
    interval: 86400
script:
  code: |
    def main(ctx, metadata):

        ## >> 自定义变量

        # quic策略
        quic = int(metadata["dst_port"])
        if metadata["network"] == "UDP":
            if quic == 443:
                if "180.163.200." in metadata["dst_ip"]:
                    return "🎯 全球直连"
                ctx.log('[Script] matched QUIC traffic use reject')
                return "REJECT"

        # 游戏主机策略               
        #SrcIP = ctx.resolve_ip(metadata["src_ip"])
        #if SrcIP == "10.10.10.14":
        #    if metadata["network"] == "udp":
        #        ctx.log('[Script] matched SrcIP')
        #        return "🎮 游戏加速"
        #    return "🌍 国际互联"
          
        # 广告拦截策略
        ad_action = {
            "SpeedTest": "🛩 SpeedTest",
            "BanAD": "🛑 广告拦截",
            "BanProgramAD": "🍃 应用净化"
          }

        ad_rule = ["SpeedTest","BanAD", "BanProgramAD"]
        for ad_name in ad_rule:
            if ctx.rule_providers[ad_name].match(metadata):
                ctx.log('[Script] matched %s' % ad_name)
                return ad_action[ad_name]
              
        # Plex策略
        #plex_direct = ["+.plex.direct"]
        #plex_tv = ["+.plex.tv"]
        #for hostname in plex_direct:
            #if hostname in metadata["host"]:
                #ctx.log('[Script] matched %s' % hostname)
                #return "🏘 回家"
        #for hostname in plex_tv:
            #if hostname in metadata["host"]:
                #ctx.log('[Script] matched %s' % hostname)
                #return "🌍 国际互联"
    
        # 定义规则集与策略组
        ruleset_action = {
            "LocalAreaNetwork": "🎯 全球直连",
            "UnBan": "🎯 全球直连",
            "GoogleFCM": "📢 谷歌FCM",
            "GoogleCN": "🎯 全球直连",
            "OneDrive": "Ⓜ️ 微软云盘",
            "Apple": "🍎 苹果服务",
            "Telegram": "📲 Telegram",
            "NetEaseMusic": "🎶 网易音乐",
            "Epic": "🎮 国际游戏",
            "Sony": "🎮 国际游戏",
            "Steam": "🎮 国际游戏",
            "YouTube": "📹 Youtube",
            "Netflix": "🎥 Netflix",
            "Bahamut": "📺 巴哈姆特",
            "ChinaMedia": "🌏 国内媒体",
            "ProxyMedia": "🌍 国外媒体",
            "BilibiliHMT": "🌏 出海媒体",
            "ProxyGFWlist": "🚀 节点选择",
            "ChinaIp": "🎯 全球直连",
            "ChinaDomain": "🎯 全球直连",
            "ChinaCompanyIp": "🎯 全球直连",
            "Download": "🎯 全球直连"
          }

        # 策略组规则
        ruleset_list = [r for r in ruleset_action]
        for rule_name in ruleset_list:
            if ctx.rule_providers[rule_name].match(metadata):
                ctx.log('[Script] matched %s' % rule_name)
                return ruleset_action[rule_name]

        ip = metadata["dst_ip"] or ctx.resolve_ip(metadata["host"])
        if ip == "":
            return "🎯 全球直连"

        code = ctx.geoip(ip)
        if code == "CN":
            return "🎯 全球直连"
            ctx.log('[Script] Geoip CN')

        # 漏网之鱼
        return "🐟 漏网之鱼"
EOF
}

config_base() { 
    echo -e "${green}优化系统,请稍候!${end}" 
    # 优化内核参数
    cat << EOF > /etc/sysctl.conf
# 开启转发
net.ipv4.ip_forward = 1
# 优化参数
fs.file-max = 1024000
fs.nr_open = 1048576
kernel.msgmni = 4096
kernel.msgmax = 65536
kernel.msgmnb = 65536
kernel.shmmni = 1024
kernel.shmmax = 4294967296
kernel.shmall = 2097152
net.core.netdev_max_backlog = 262144
net.core.somaxconn = 262144
net.ipv4.tcp_max_syn_backlog = 262144
net.core.rmem_default = 4194304
net.core.wmem_default = 4194304
net.core.rmem_max = 12582912
net.core.wmem_max = 12582912
net.core.optmem_max = 81920
net.ipv4.tcp_mem = 65536 262144 8388608
net.ipv4.tcp_rmem = 10240 87380 12582912
net.ipv4.tcp_wmem = 10240 87380 12582912
net.ipv4.tcp_max_tw_buckets = 5000
net.ipv4.tcp_fin_timeout = 10
net.ipv4.tcp_keepalive_time = 1200
net.ipv4.tcp_keepalive_probes = 5
net.ipv4.tcp_keepalive_intvl = 15
net.ipv4.tcp_syn_retries = 3
net.ipv4.tcp_retries1 = 3
net.ipv4.tcp_mtu_probing = 1
net.ipv4.tcp_base_mss = 1452
net.ipv4.tcp_fack = 1
net.ipv4.tcp_low_latency = 0
net.ipv4.tcp_no_metrics_save = 1
net.ipv4.tcp_sack = 1
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_timestamps = 1
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_notsent_lowat = 16384
net.ipv4.ip_local_port_range = 10000 65535
net.ipv4.ip_local_reserved_ports = 7892
net.ipv4.tcp_fastopen = 3
net.ipv4.ip_default_ttl = 128
net.ipv4.udp_mem = 65536 262144 8388608
net.ipv4.udp_rmem_min = 65535
net.ipv4.udp_wmem_min = 65535
net.ipv4.route.flush = 1
# 禁用ipv6
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
# 开启ECN加速
net.ipv4.tcp_ecn = 1
net.ipv4.tcp_ecn_fallback = 1
EOF

    echo 'net.core.default_qdisc = fq_pie' | sudo tee /etc/sysctl.d/90-override.conf >> /dev/null 2>&1

    sysctl -p >> /dev/null 2>&1

    cat << EOF > /etc/security/limits.d/98-nofile.conf
# add lines to it
*     soft     nofile     524288
*     hard     nofile     524288
root  soft     nofile     524288
root  hard     nofile     524288
EOF

echo 'DNSStubListener=no'>>/etc/systemd/resolved.conf

}

config_ip_dns(){
    read -e -p "输入本机IP:" ip_add
    # read -e -p "输入子网码:" ip_mask
    read -e -p "输入网关:" ip_gw
    read -e -p "输入DNS:" ip_dns
    echo -e "${green}配置ip信息,请稍候!${end}" 
    rm -rf /etc/resolv.conf
    cat << EOF > /etc/resolv.conf
nameserver $ip_dns
nameserver 202.96.128.86
EOF

    cat << EOF > /etc/network/interfaces
source /etc/network/interfaces.d/*
auto lo
iface lo inet loopback
auto $eth_n
iface $eth_n inet static
  address $ip_add
  netmask 255.255.255.0
  gateway $ip_gw
  dns-nameservers $ip_dns
  mtu 1492
  mss 1452
EOF
}

getcpucore(){
    cputype=$(uname -ms | tr ' ' '_' | tr '[A-Z]' '[a-z]')
    [ -n "$(echo $cputype | grep -E "linux.*armv7.*")" ] && [ -n "$(cat /proc/cpuinfo | grep vfp)" ] && cpucore="linux-armv7"
    [ -n "$(echo $cputype | grep -E "linux.*aarch64.*|linux.*armv8.*")" ] && cpucore="linux-armv8"
    [ -n "$(echo $cputype | grep -E "linux.*86_64.*")" ] && cpucore="linux-amd64"
}

getcpucore2(){
    cputype2=$(uname -ms | tr ' ' '_' | tr '[A-Z]' '[a-z]')
    [ -n "$(echo $cputype2 | grep -E "linux.*armv7.*")" ] && [ -n "$(cat /proc/cpuinfo | grep vfp)" ] && cpucore2="linux-armv-7"
    [ -n "$(echo $cputype2 | grep -E "linux.*aarch64.*|linux.*armv8.*")" ] && cpucore2="linux-arm64"
    [ -n "$(echo $cputype2 | grep -E "linux.*86_64.*")" ] && cpucore2="linux-amd64"
}

getcpucore3(){
    cputype3=$(uname -ms | tr ' ' '_' | tr '[A-Z]' '[a-z]')
    [ -n "$(echo $cputype3 | grep -E "linux.*armv7.*")" ] && [ -n "$(cat /proc/cpuinfo | grep vfp)" ] && cpucore3="armv7"
    [ -n "$(echo $cputype3 | grep -E "linux.*aarch64.*|linux.*armv8.*")" ] && cpucore3="aarch64"
    [ -n "$(echo $cputype3 | grep -E "linux.*86_64.*")" ] && cpucore3="linux64"
}


install_debian() {
    rm -rf /etc/apt/sources.list.d/*

    cat << EOF > /etc/apt/sources.list
deb http://mirrors.aliyun.com/debian $(cat /etc/os-release | grep VERSION= | cut -d '(' -f2 | cut -d ')' -f1) main
deb http://mirrors.aliyun.com/debian-security $(cat /etc/os-release | grep VERSION= | cut -d '(' -f2 | cut -d ')' -f1)/updates main
deb http://mirrors.aliyun.com/debian $(cat /etc/os-release | grep VERSION= | cut -d '(' -f2 | cut -d ')' -f1)-updates main
EOF
    echo -e "${green}升级系统,请稍候! 大概5-10分钟!${end}" 
    apt update >> /dev/null 2>&1
    apt -y full-upgrade >> /dev/null 2>&1
    apt -y autoclean >> /dev/null 2>&1 
    echo -e "${green}系统升级完成!${end}"

    echo -e "${green}安装软件,请稍候! 大概5-10分钟!${end}"     
    apt -y install htop sudo strace supervisor curl wget unzip nftables ntpdate net-tools gawk jq >> /dev/null 2>&1
    rm /etc/localtime
    ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
    ntpdate cn.pool.ntp.org >> /dev/null 2>&1
    chown -R root /srv/ >> /dev/null 2>&1
    echo -e "${green}软件安装完成!${end}"
}

install_clash() {
# Clash Premium core
    clash_premium_url="https://api.github.com/repos/Dreamacro/clash/releases/tags/premium"

    if [ ! -d "/tmp/clash" ]; then
      mkdir /tmp/clash
    fi

    if [ ! -d "${CLASH_PATH}" ]; then
      mkdir ${CLASH_PATH}
    fi 

    echo -e "${green}Get Clash Premium release information.${end}"
    webget2 /tmp/clash/clash_premium_release.json "${clash_premium_url}"
    if [ ! -f "/tmp/clash/clash_premium_release.json" ]; then
        echo -e "${red}Failed to get Clash Premium release information.${end}"
        exit 1
    fi

    clash_premium_download_url=$(jq ".assets[${i}].browser_download_url" /tmp/clash/clash_premium_release.json | tr -d '"' | grep -m1 ${cpucore})
    if [ "${clash_premium_download_url}" == "" ]; then
        echo -e "${red}No compatible Clash Premium for your platform.${end}"
        exit 1
    fi

    echo -e "${green}Start download Clash Premium from ${clash_premium_download_url}${end}" 
    webget2 /tmp/clash/clash.gz "${url_cdn}${clash_premium_download_url}"
    if [ ! -f "/tmp/clash/clash.gz" ]; then
        echo -e "${red}Failed to download Clash Premium.${end}"
        exit 1
    fi

    remote_clash_version=$(jq '.name' /tmp/clash/clash_premium_release.json | tr -d '"' | awk '{print $2}')
    echo "clash_v ${remote_clash_version}" >> ${AIOCLASH_PATH}/version

    rm -rf ${clash_bin}
    cd ~
    gunzip /tmp/clash/clash.gz
    mv /tmp/clash/clash ${clash_bin}
    chmod +x ${clash_bin}
    setcap cap_net_bind_service=+ep ${clash_bin}

    download_clash_dashboard
    # download_clash_Country
    
    rm -rf /tmp/clash
    supervisor_clash_config
    supervisorctl update >> /dev/null 2>&1
    supervisorctl restart clash >> /dev/null 2>&1
    echo -e "${yellow}Clash successfully installed${end}"
}

download_clash_dashboard () {
    clash_dashboard_download_url="https://github.com/Dreamacro/clash-dashboard/archive/gh-pages.zip"
    echo -e "${green}Start download Clash Dashboard from ${clash_dashboard_download_url}${end}" 
    webget2  /tmp/dashboard.zip  ${url_cdn}${clash_dashboard_download_url}
    if [ -f "/tmp/dashboard.zip" ]; then
      cd /tmp
      unzip dashboard.zip >> /dev/null 2>&1
      [ -d "${CLASH_PATH}/dashboard" ] && rm -rf "${CLASH_PATH}/dashboard"
      mv -f -T /tmp/clash-dashboard-gh-pages ${CLASH_PATH}/dashboard
      rm -rf /tmp/dashboard.zip
    else
      echo -e "${red}Failed to download Clash Dashboard.${end}"
      exit 1
    fi
}

download_clash_Country () {
    clash_Country_download_url="https://raw.githubusercontent.com/alecthw/mmdb_china_ip_list/release/Country.mmdb"
    echo -e "${green}Start download Clash Country.mmdb from ${clash_Country_download_url}${end}" 
    webget2 /tmp/Country.mmdb ${url_cdn}${clash_Country_download_url}
    if [ -f "/tmp/Country.mmdb" ]; then
      [ -f "${CLASH_PATH}/Country.mmdb" ] && rm -rf "${CLASH_PATH}/Country.mmdb"
      mv /tmp/Country.mmdb ${CLASH_PATH}/Country.mmdb
    else
      echo -e "${red}Failed to download Country.mmdb.${end}"
      exit 1
    fi
}

update_clash_y() {
    getcpucore
    if [ ! -f "${clash_bin}" ]; then
      echo "1970.01.01" > ${clash_version_file}
    fi

    if [ ! -f "${clash_version_file}" ]; then
      echo $(${clash_bin} -v 2>/dev/null | awk '{print $2}') > ${clash_version_file}
    fi
    local_clash_version=$(cat "${clash_version_file}")

    #date -d "${local_clash_version}-00:00" +%s
    echo -e "${green}Locale Clash Premium: ${local_clash_version}.${end}"
    # echo "Please download the latest version from https://github.com/Dreamacro/clash/releases/tag/premium manually."

    [ -f /tmp/clash_premium_release.json ] && rm /tmp/clash_premium_release.json
    webget2 /tmp/clash_premium_release.json https://api.github.com/repos/Dreamacro/clash/releases/tags/premium echooff
    if [ ! -f /tmp/clash_premium_release.json ]; then
      echo -e "${red}Failed to get the release information of Clash Premium.${end}"
      exit 1
    fi

    remote_clash_version=$(jq '.name' /tmp/clash_premium_release.json | tr -d '"' | awk '{print $2}')
    if [ $(echo ${local_clash_version} | tr -d ".") -ge $(echo ${remote_clash_version} | tr -d ".") ]; then
      echo -e "${green}Clash Premium ${local_clash_version} is up to date.${end}"
      exit 2
    else
      echo -e "${green}Found a new version of Clash Premium ${remote_clash_version}.${end}"
    fi

    [ -f /tmp/clash_premium_release_assets ] && rm /tmp/clash_premium_release_assets
    jq '.assets[].name' /tmp/clash_premium_release.json > /tmp/clash_premium_release_assets
    if [ ! -f /tmp/clash_premium_release_assets ]; then
      echo -e "${red}Failed to get the release information of Clash Premium.${end}"
      rm /tmp/clash_premium_release.json
      exit 1
    fi

    i=0
    while read line ; do
      l=$(echo $line | grep "${cpucore}")
      if [ ! -z $l ]; then
        break
      fi
      i=$(( i+1 ))
    done < /tmp/clash_premium_release_assets

    rm /tmp/clash_premium_release_assets
    remote_clash_download_url=$(jq ".assets[${i}].browser_download_url" /tmp/clash_premium_release.json | tr -d '"')
    rm /tmp/clash_premium_release.json 

    echo "Start downloading Clash Premium ${remote_clash_version} from ${remote_clash_download_url}..."
    [ -f "${CLASH_CORE_PATH}/clash.gz" ] && rm "${CLASH_CORE_PATH}/clash.gz"
    webget2 ${CLASH_CORE_PATH}/clash.gz ${url_cdn}${remote_clash_download_url}
    if [ ! -f "${CLASH_CORE_PATH}/clash.gz" ]; then
      echo -e "${red}Failed to download Clash Premium.${end}"
      echo -e "${red}Please download and upload it to ${CLASH_CORE_PATH} manually.${end}"
      exit 1
    fi

    [ -f ${CLASH_CORE_PATH}/clash.old ] && rm ${CLASH_CORE_PATH}/clash.old
    [ -f ${clash_bin} ] && mv ${clash_bin} ${CLASH_CORE_PATH}/clash.old
    gzip -d "${CLASH_CORE_PATH}/clash.gz" && chmod +x ${clash_bin} && ${clash_bin} -v
    if [ $? -eq 1 ]; then
      echo -e "${red}Failed to download Clash Premium.${end}"
      echo -e "${red}Please try to download it again.${end}"
      [ -f ${CLASH_CORE_PATH}/clash.gz ] && rm "${CLASH_CORE_PATH}/clash.gz"
      [ -f ${clash_bin} ] && rm ${clash_bin}
      mv ${CLASH_CORE_PATH}/clash.old ${clash_bin}
      exit 1
    fi

    new_clash_version=$(${clash_bin} -v 2>/dev/null | awk '{print $2}')
    echo ${new_clash_version} > ${clash_version_file}
    echo -e "${green}Clash Premium has been updated to ${new_clash_version}.${end}"
}

install_mosdns() {
# Mosdns core
    mosdns_url="https://api.github.com/repos/IrineSistiana/mosdns/releases/latest"

    if [ ! -d "/tmp/mosdns" ]; then
      mkdir /tmp/mosdns
    fi

    if [ ! -d "${MOSDNS_PATH}" ]; then
      mkdir ${MOSDNS_PATH}
    fi 

    echo -e "${green}Get Mosdns release information.${end}"
    webget2 /tmp/mosdns/mosdns_release.json "${mosdns_url}"
    if [ ! -f "/tmp/mosdns/mosdns_release.json" ]; then
        echo -e "${red}Failed to get Mosdns release information.${end}"
        exit 1
    fi

    mosdns_download_url=$(jq ".assets[${i}].browser_download_url" /tmp/mosdns/mosdns_release.json | tr -d '"' | grep -m1 ${cpucore2})
    if [ "${mosdns_download_url}" == "" ]; then
        echo -e "${red}No compatible Mosdns for your platform.${end}"
        exit 1
    fi

    echo -e "${green}Start download Mosdns from ${mosdns_download_url}${end}" 
    webget2 /tmp/mosdns/mosdns.zip "${url_cdn}${mosdns_download_url}"
    if [ ! -f "/tmp/mosdns/mosdns.zip" ]; then
        echo -e "${red}Failed to download Mosdns.${end}"
        exit 1
    fi

    remote_mosdns_version=$(jq '.name' /tmp/mosdns/mosdns_release.json | tr -d '"' | awk '{print $1}'| cut -d'-' -f1)
    echo "mosdns_v ${remote_mosdns_version}" >> ${AIOCLASH_PATH}/version

    cd /tmp/mosdns
    rm -rf ${mosdns_bin}
    unzip /tmp/mosdns/mosdns.zip  >> /dev/null 2>&1
    mv mosdns ${mosdns_bin}
    chmod 777 ${mosdns_bin}

    download_mosdns_config
    download_mosdns_geoip
    download_geosite_geoip    

    rm -rf /tmp/mosdns
    supervisor_mosdns_config
    supervisorctl update >> /dev/null 2>&1
    supervisorctl restart mosdns >> /dev/null 2>&1
    echo -e "${yellow}Mosdns successfully installed${end}"
}

download_mosdns_config () {
    config_download_url="https://raw.githubusercontent.com/gdfsnhsw/aioclash/main/mosdns/config.yaml"
    echo -e "${green}Start download Mosdns Config.yaml from ${config_download_url}${end}" 
    webget2  /tmp/config.yaml  ${url_cdn}${config_download_url}
    if [ -f "/tmp/config.yaml" ]; then
      [ -f "${MOSDNS_PATH}/config.yaml" ] && rm -rf "${MOSDNS_PATH}/config.yaml"
      mv /tmp/config.yaml ${MOSDNS_PATH}/config.yaml
    else
      echo -e "${red}Failed to download Mosdns Config.yaml${end}"
      exit 1
    fi
}

download_mosdns_geoip () {
    geoip_download_url="https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geoip.dat"
    echo -e "${green}Start download Mosdns Geoip.dat from ${geoip_download_url}${end}" 
    webget2  /tmp/geoip.dat  ${url_cdn}${geoip_download_url}
    if [ -f "/tmp/geoip.dat" ]; then
     [ -f "${MOSDNS_PATH}/geoip.dat" ] && rm -rf "${MOSDNS_PATH}/geoip.dat"
      mv /tmp/geoip.dat ${MOSDNS_PATH}/geoip.dat
    else   
      echo -e "${red}Failed to download Mosdns Geoip.dat${end}"
      exit 1
    fi
}

download_geosite_geoip () {
    geosite_download_url="https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geosite.dat"
    echo -e "${green}Start download Mosdns Geosite.dat from ${geosite_download_url}${end}" 
    webget2  /tmp/geosite.dat  ${url_cdn}${geosite_download_url}
    if [ -f "/tmp/geosite.dat" ]; then
      [ -f "${MOSDNS_PATH}/geosite.dat" ] && rm -rf "${MOSDNS_PATH}/geosite.dat"
      mv /tmp/geosite.dat ${MOSDNS_PATH}/geosite.dat
    else
      echo -e "${red}Failed to download Mosdns Geosite.dat${end}"
      exit 1
    fi
}

update_mosdns_y() {
    getcpucore2
    if [ ! -f "${mosdns_bin}" ]; then
      echo "v0.0.1" > ${mosdns_version_file}
    fi

    if [ ! -f "${mosdns_version_file}" ]; then
      echo $(${mosdns_bin} -v 2>/dev/null | awk '{print $1}'| cut -d'-' -f1) > ${mosdns_version_file}
    fi
    local_mosdns_version=$(cat "${mosdns_version_file}")

    #date -d "${local_mosdns_version}-00:00" +%s
    echo -e "${green}Locale Mosdns: ${local_mosdns_version}.${end}"
    # echo "Please download the latest version from https://api.github.com/repos/IrineSistiana/mosdns/releases/latest manually."

    [ -f /tmp/mosdns_release.json ] && rm /tmp/mosdns_release.json
    webget2 /tmp/mosdns_release.json https://api.github.com/repos/IrineSistiana/mosdns/releases/latest echooff
    if [ ! -f /tmp/mosdns_release.json ]; then
      echo -e "${red}Failed to get the release information of Mosdns.${end}"
      exit 1
    fi

    remote_mosdns_version=$(jq '.name' /tmp/mosdns_release.json | tr -d '"' | awk '{print $1}'| cut -d'-' -f1)
    if [ $(echo ${local_mosdns_version} | tr -d "v"".") -ge $(echo ${remote_mosdns_version} | tr -d "v"".") ]; then
      echo -e "${green}Mosdns ${local_mosdns_version} is up to date.${end}"
      exit 2
    else
      echo -e "${green}Found a new version of Mosdns ${remote_mosdns_version}.${end}"
    fi

    [ -f /tmp/mosdns_release_assets ] && rm /tmp/mosdns_release_assets
    jq '.assets[].name' /tmp/mosdns_release.json > /tmp/mosdns_release_assets
    if [ ! -f /tmp/mosdns_release_assets ]; then
      echo -e "${red}Failed to get the release information of Mosdns.${end}"
      rm /tmp/mosdns_release.json
      exit 1
    fi

    i=0
    while read line ; do
      l=$(echo $line | grep "${cpucore2}")
      if [ ! -z $l ]; then
        break
      fi
      i=$(( i+1 ))
    done < /tmp/mosdns_release_assets

    rm /tmp/mosdns_release_assets
    remote_mosdns_download_url=$(jq ".assets[${i}].browser_download_url" /tmp/mosdns_release.json | tr -d '"')
    rm /tmp/mosdns_release.json
    echo "Start downloading Mosdns ${remote_mosdns_version} from ${remote_mosdns_download_url}"
    [ -f "${MOSDNS_CORE_PATH}/mosdns.zip" ] && rm "${MOSDNS_CORE_PATH}/mosdns.zip"
    webget2 ${MOSDNS_CORE_PATH}/mosdns.zip ${url_cdn}${remote_mosdns_download_url}
    if [ ! -f "${MOSDNS_CORE_PATH}/mosdns.zip" ]; then
      echo -e "${red}Failed to download Mosdns.${end}"
      echo -e "${red}Please download and upload it to ${MOSDNS_CORE_PATH} manually.${end}"
      exit 1
    fi

    [ -f ${MOSDNS_CORE_PATH}/mosdns.old ] && rm ${MOSDNS_CORE_PATH}/mosdns.old
    [ -f ${mosdns_bin} ] && mv ${mosdns_bin} ${MOSDNS_CORE_PATH}/mosdns.old
    unzip "${MOSDNS_CORE_PATH}/mosdns.zip" "mosdns" -d ${MOSDNS_CORE_PATH} >> /dev/null 2>&1 && chmod +x ${mosdns_bin} && ${mosdns_bin} -v
    [ -f ${MOSDNS_CORE_PATH}/mosdns.zip ] && rm "${MOSDNS_CORE_PATH}/mosdns.zip"
    if [ $? -eq 1 ]; then
      echo -e "${red}Failed to download Mosdns.${end}"
      echo -e "${red}Please try to download it again.${end}"
      [ -f ${MOSDNS_CORE_PATH}/mosdns.zip ] && rm "${MOSDNS_CORE_PATH}/mosdns.zip"
      [ -f ${mosdns_bin} ] && rm ${mosdns_bin}
      mv ${MOSDNS_CORE_PATH}/mosdns.old ${mosdns_bin}
      exit 1
    fi

    new_mosdns_version=$(${mosdns_bin} -v 2>/dev/null | awk '{print $1}'| cut -d'-' -f1)
    echo ${new_mosdns_version} > ${mosdns_version_file}
    echo -e "${green}Mosdns has been updated to ${new_mosdns_version}.${end}"
}

install_subconverter() {
# Subconverter core
    subconverter_url="https://api.github.com/repos/tindy2013/subconverter/releases/latest"

    if [ ! -d "/tmp/subconverter" ]; then
      mkdir /tmp/subconverter
    fi

    if [ ! -d "${SUBCONVERTER_PATH}" ]; then
      mkdir ${SUBCONVERTER_PATH}
    fi 

    echo -e "${green}Get Subconverter release information.${end}"
    webget2 /tmp/subconverter/subconverter_release.json "${subconverter_url}"
    if [ ! -f "/tmp/subconverter/subconverter_release.json" ]; then
        echo -e "${red}Failed to get Subconverter release information.${end}"
        exit 1
    fi

    subconverter_download_url=$(jq ".assets[${i}].browser_download_url" /tmp/subconverter/subconverter_release.json | tr -d '"' | grep -m1 ${cpucore3})
    if [ "${subconverter_download_url}" == "" ]; then
        echo -e "${red}No compatible Subconverter for your platform.${end}"
        exit 1
    fi

    echo -e "${green}Start download Subconverter from ${subconverter_download_url}${end}" 
    webget2 /tmp/subconverter/subconverter.tar.gz "${url_cdn}${subconverter_download_url}"
    if [ ! -f "/tmp/subconverter/subconverter.tar.gz" ]; then
        echo -e "${red}Failed to download Subconverter.${end}"
        exit 1
    fi

    rm -rf ${subconverter_bin}
    cd /tmp/subconverter
    tar -zxvf subconverter.tar.gz  >> /dev/null 2>&1
    mv subconverter ${AIOCLASH_PATH}
    chmod 777 ${subconverter_bin}

    if [ ! -f "${subconverter_version_file}" ]; then
      echo 0 > ${subconverter_version_file}
    fi
    remote_subconverter_version=$(jq '.name' /tmp/subconverter/subconverter_release.json | tr -d '"' | tr -d 'v')
    echo "${remote_subconverter_version}" > "${subconverter_version_file}"
    echo "subconverter_v ${remote_subconverter_version}" >> ${AIOCLASH_PATH}/version

    # download_subconverter_formyairport
    # download_subconverter_all_base
    # download_subconverter_Loyalsoldier
    # download_subconverter_yuanlam
    # download_subconverter_ShellClash_Full
    # download_subconverter_LM-Firefly

    rm -rf /tmp/subconverter
    supervisor_subconverter_config
    supervisorctl update >> /dev/null 2>&1
    supervisorctl restart subconverter >> /dev/null 2>&1
    echo -e "${yellow}Subconverter successfully installed${end}"

    cat << EOF > ${SUBCONVERTER_PATH}/profiles/formyairport.ini
[Profile]
#调用说明:https://github.com/tindy2013/subconverter/blob/master/README-cn.md
target=clash
scv=false
tfo=false
fdn=true
emoji=true
append_info=false
list=false
exclude=(流量|本站|官网|过期|群|IPV6|到期时间|过期时间|产品名称|先购买套餐|流量消耗|永久|更新订阅)
rename=云\s-\s@
config=${url_cdn}https://raw.githubusercontent.com/gdfsnhsw/aioclash/main/subconverter/AIO.ini
expand=false
classic=true
script=true
url=trojan://密码@域名:443#名称
udp=false
EOF
}

# download_subconverter_formyairport () {
#     formyairport_download_url="https://raw.githubusercontent.com/gdfsnhsw/aioclash/main/subconverter/formyairport.ini"
#     echo -e "${green}Start download Subconverter formyairport from ${formyairport_download_url}${end}" 
#     webget2  /tmp/formyairport.ini  ${url_cdn}${formyairport_download_url}
#     if [ -f "/tmp/formyairport.ini" ]; then
#       [ -f "${SUBCONVERTER_PATH}/profiles/formyairport.ini" ] && rm -rf "${SUBCONVERTER_PATH}/profiles/formyairport.ini"
#       mv /tmp/formyairport.ini ${SUBCONVERTER_PATH}/profiles/formyairport.ini
#     else
#       echo -e "${red}Failed to download Subconverter formyairport.ini${end}"
#       exit 1
#     fi
# }

# download_subconverter_all_base () {
#     all_base_download_url="https://raw.githubusercontent.com/gdfsnhsw/aioclash/main/subconverter/all_base.tpl"
#     echo -e "${green}Start download Subconverter All_base.tpl from ${all_base_download_url}${end}" 
#     webget2  /tmp/all_base.tpl  ${url_cdn}${all_base_download_url}
#     if [ -f "/tmp/all_base.tpl" ]; then
#       [ -f "${SUBCONVERTER_PATH}/base/all_base.tpl" ] && rm -rf "${SUBCONVERTER_PATH}/base/all_base.tpl"
#       mv /tmp/all_base.tpl ${SUBCONVERTER_PATH}/base/all_base.tpl
#     else
#       echo -e "${red}Failed to download Subconverter All_base.tpl${end}"
#       exit 1
#     fi
# }

# download_subconverter_Loyalsoldier () {
#     Loyalsoldier_download_url="https://raw.githubusercontent.com/gdfsnhsw/aioclash/main/subconverter/Loyalsoldier.ini"
#     echo -e "${green}Start download Subconverter Loyalsoldier.ini from ${Loyalsoldier_download_url}${end}" 
#     webget2  /tmp/Loyalsoldier.ini  ${url_cdn}${Loyalsoldier_download_url}
#     if [ -f "/tmp/Loyalsoldier.ini" ]; then
#       [ -f "${SUBCONVERTER_PATH}/profiles/Loyalsoldier.ini" ] && rm -rf "${SUBCONVERTER_PATH}/profiles/Loyalsoldier.ini"
#       mv /tmp/Loyalsoldier.ini ${SUBCONVERTER_PATH}/profiles/Loyalsoldier.ini
#     else
#       echo -e "${red}Failed to download Subconverter Loyalsoldier.ini${end}"
#       exit 1
#     fi
# }

# download_subconverter_yuanlam () {
#     yuanlam_download_url="https://raw.githubusercontent.com/gdfsnhsw/aioclash/main/subconverter/yuanlam.ini"
#     echo -e "${green}Start download Subconverter yuanlam.ini from ${yuanlam_download_url}${end}" 
#     webget2  /tmp/yuanlam.ini  ${url_cdn}${yuanlam_download_url}
#     if [ -f "/tmp/yuanlam.ini" ]; then
#       [ -f "${SUBCONVERTER_PATH}/profiles/yuanlam.ini" ] && rm -rf "${SUBCONVERTER_PATH}/profiles/yuanlam.ini"
#       mv /tmp/yuanlam.ini ${SUBCONVERTER_PATH}/profiles/yuanlam.ini
#     else
#       echo -e "${red}Failed to download Subconverter yuanlam.ini${end}"
#       exit 1
#     fi
# }

# download_subconverter_ShellClash_Full () {
#     ShellClash_Full_download_url="https://raw.githubusercontent.com/gdfsnhsw/aioclash/main/subconverter/ShellClash_Full.ini"
#     echo -e "${green}Start download Subconverter ShellClash_Full.ini from ${ShellClash_Full_download_url}${end}" 
#     webget2  /tmp/ShellClash_Full.ini  ${url_cdn}${ShellClash_Full_download_url}
#     if [ -f "/tmp/ShellClash_Full.ini" ]; then
#       [ -f "${SUBCONVERTER_PATH}/profiles/ShellClash_Full.ini" ] && rm -rf "${SUBCONVERTER_PATH}/profiles/ShellClash_Full.ini"
#       mv /tmp/ShellClash_Full.ini ${SUBCONVERTER_PATH}/profiles/ShellClash_Full.ini
#     else
#       echo -e "${red}Failed to download Subconverter ShellClash_Full.ini${end}"
#       exit 1
#     fi
# }

# download_subconverter_LM-Firefly () {
#     LM_Firefly_download_url="https://raw.githubusercontent.com/gdfsnhsw/aioclash/main/subconverter/LM-Firefly.ini"
#     echo -e "${green}Start download Subconverter LM-Firefly.ini from ${LM_Firefly_download_url}${end}" 
#     webget2  /tmp/LM-Firefly.ini  ${url_cdn}${LM_Firefly_download_url}
#     if [ -f "/tmp/LM-Firefly.ini" ]; then
#       [ -f "${SUBCONVERTER_PATH}/profiles/LM-Firefly.ini" ] && rm -rf "${SUBCONVERTER_PATH}/profiles/LM-Firefly.ini"
#       mv /tmp/LM-Firefly.ini ${SUBCONVERTER_PATH}/profiles/LM-Firefly.ini
#     else
#       echo -e "${red}Failed to download Subconverter LM-Firefly.ini${end}"
#       exit 1
#     fi
# }

update_subconverter_y() {
    getcpucore3
    if [ ! -f "${subconverter_version_file}" ]; then
      echo 0 > ${subconverter_version_file}
    fi
    local_subconverter_version=$(cat "${subconverter_version_file}")

    [ -f /tmp/subconverter_release.json ] && rm /tmp/subconverter_release.json
    webget2 /tmp/subconverter_release.json https://api.github.com/repos/tindy2013/subconverter/releases/latest echooff
    if [ ! -f /tmp/subconverter_release.json ]; then
      echo -e "${red}Failed to get the release information of Subconverter${end}"
      exit 1
    fi

    remote_subconverter_version=$(jq '.name' /tmp/subconverter_release.json | tr -d '"' | tr -d 'v')
    if (verlt "${local_subconverter_version}" "${remote_subconverter_version}") then
      echo -e "${green}Found a new version of Subconverter${end}"
    else
      echo -e "${green}Subconverter is up to date${end}"
      exit 2
    fi

    [ -f /tmp/subconverter_release_assets ] && rm /tmp/subconverter_release_assets
    jq '.assets[].name' /tmp/subconverter_release.json > /tmp/subconverter_release_assets
    if [ ! -f /tmp/subconverter_release_assets ]; then
      echo -e "${red}Failed to get the release information of Subconverter${end}"
      rm /tmp/subconverter_release.json
      exit 1
    fi

    i=0
    while read line ; do
      l=$(echo $line | grep "${cpucore3}")
      if [ ! -z $l ]; then
        break
      fi
      i=$(( i+1 ))
    done < /tmp/subconverter_release_assets

    rm /tmp/subconverter_release_assets
    remote_subconverter_download_url=$(jq ".assets[${i}].browser_download_url" /tmp/subconverter_release.json | tr -d '"' | grep -m1 ${cpucore3})
    rm /tmp/subconverter_release.json
    echo "Start download Subconverter v${remote_subconverter_version} from ${remote_subconverter_download_url}..."
    [ -f "/tmp/subconverter.tar.gz" ] && rm "/tmp/subconverter.tar.gz"
    webget2 /tmp/subconverter.tar.gz "${url_cdn}${remote_subconverter_download_url}"
    if [ ! -f "/tmp/subconverter.tar.gz" ]; then
      echo -e "${red}Failed to download subconverter${end}"
      exit 1
    fi

    [ -d "/tmp/subconverter" ] && rm -rf "/tmp/subconverter"
    mkdir "/tmp/subconverter"
    cd /tmp
    tar -zxvf /tmp/subconverter.tar.gz >> /dev/null 2>&1
    if [ $? -ne 0 ]; then
      echo -e "${red}Failed to tar subconverter.tar.gz${end}"
      rm /tmp/subconverter.tar.gz
      rm -rf /tmp/subconverter
      exit 1
    fi
    rm /tmp/subconverter.tar.gz
    [ -d "${subconverter_bin}" ] && rm -rf "${subconverter_bin}"
    mv subconverter/subconverter ${subconverter_bin}
    chmod 777 ${subconverter_bin}
    rm -rf /tmp/subconverter

    echo "${remote_subconverter_version}" > "${subconverter_version_file}"
    echo -e "${green}Subconverter has been updated${end}"
}



update_shell_y() {
    new_shell_ver=$(wget -qO- ${url_cdn}https://raw.githubusercontent.com/gdfsnhsw/aioclash/main/version | grep version | awk '{print $2}')
    webget2 /tmp/aioclash ${url_cdn}https://raw.githubusercontent.com/gdfsnhsw/aioclash/main/aioclash
    if [[ $? -ne 0 ]]; then
      echo -e "${red}AIOClash下载失败!${end}"
      exit 1
    fi
    echo -e "`date +%F\ %T` AIOClash v${new_shell_ver} 下载成功!" >> /tmp/update.log  2>&1
    rm -rf ${aioclash_path}   
    mv /tmp/aioclash ${aioclash_path}  >> /dev/null 2>&1
    chmod +x ${aioclash_path} >> /dev/null 2>&1
    echo -e "${green}AIOClash v${new_shell_ver}强制升级成功，请重新运行脚本!${end}" && exit 0
}

update_shell() {
    new_shell_ver=$(wget -qO- ${url_cdn}https://raw.githubusercontent.com/gdfsnhsw/aioclash/main/version | grep version | awk '{print $2}')
    if [[ "${sh_ver}" != "${new_shell_ver}" ]]; then
      echo -e "`date +%F\ %T` AIOClash  最新版本: ${new_shell_ver}，当前版本:${sh_ver}"
      webget2 /tmp/aioclash ${url_cdn}https://raw.githubusercontent.com/gdfsnhsw/aioclash/main/aioclash
      if [[ $? -ne 0 ]]; then
        echo -e "${red}AIOClash下载失败!${end}"
        exit 1
      fi
      echo -e "`date +%F\ %T` AIOClash v${new_shell_ver} 下载成功!" >> /tmp/update.log  2>&1
      rm -rf ${aioclash_path}   
      mv /tmp/aioclash ${aioclash_path}  >> /dev/null 2>&1
      chmod +x ${aioclash_path} >> /dev/null 2>&1
      echo -e "${green}AIOClash v${new_shell_ver}升级成功，请重新运行脚本!${end}" && exit 0
    fi
}

install_nftables_cn() {
    if [ ! -d "/tmp/nftables" ]; then
      mkdir /tmp/nftables
    fi
    mkdir -p /lib/clash
    nftables_download_url="https://raw.githubusercontent.com/gdfsnhsw/aioclash/main/nftables/nftables.conf"
    echo -e "${green}Start download Nftables nftables.conf from ${nftables_download_url}${end}" 
    webget2  /tmp/nftables/nftables.conf  ${url_cdn}${nftables_download_url}
    if [ ! -f "/tmp/nftables/nftables.conf" ]; then
      echo -e "${red}Failed to download Nftables nftables.conf${end}"
      exit 1
    fi
    mv /tmp/nftables/nftables.conf /lib/clash/nftables.conf

    rules_download_url="https://raw.githubusercontent.com/gdfsnhsw/aioclash/main/nftables/rules.sh"
    echo -e "${green}Start download Nftables rules.sh from ${rules_download_url}${end}" 
    webget2  /tmp/nftables/rules.sh  ${url_cdn}${rules_download_url}
    if [ ! -f "/tmp/nftables/rules.sh" ]; then
      echo -e "${red}Failed to download Nftables rules.sh${end}"
      exit 1
    fi
    mv /tmp/nftables/rules.sh /lib/clash/rules.sh
    chmod 700 /lib/clash/rules.sh

    download_cn_ip

    cat << EOF > /lib/clash/private.nft
define private_list = {
	10.0.0.0/8,
	11.0.0.0/8,
	100.64.0.0/10,
	127.0.0.0/8,
	169.254.0.0/16,
	172.16.0.0/12,
	192.168.0.0/16,
	224.0.0.0/4,
	240.0.0.0/4
}
EOF

    cat << EOF > /etc/udev/rules.d/99-clash.rules
SUBSYSTEM=="net",ENV{INTERFACE}=="utun",ACTION=="add",RUN+="/lib/clash/rules.sh setup"
SUBSYSTEM=="net",ENV{INTERFACE}=="utun",ACTION=="remove",RUN+="/lib/clash/rules.sh clean"
EOF

    echo -e "${yellow}Nftables successfully installed${end}"
}

download_cn_ip() {
    if [ ! -d "/tmp/nftables" ]; then
      mkdir /tmp/nftables
    fi
    china_ip_list_download_url="https://raw.githubusercontent.com/17mon/china_ip_list/master/china_ip_list.txt"
    echo -e "${green}Start download china_ip_list from ${china_ip_list_download_url}${end}" 
    webget2  /tmp/nftables/china_ip_list.txt  ${url_cdn}${china_ip_list_download_url}
    if [ ! -f "/tmp/nftables/china_ip_list.txt" ]; then
      echo -e "${red}Failed to download Nftables china_ip_list.txt${end}"
      exit 1
    fi    
    echo "define chnroute_list = {" > /tmp/nftables/chnroute.nft
    cat /tmp/nftables/china_ip_list.txt | sed s/$/,/g >> /tmp/nftables/chnroute.nft
    echo "}" >> /tmp/nftables/chnroute.nft

    if [ -f "/tmp/nftables/chnroute.nft" ]; then
      [ -f "/tmp/nftables/chnroute.nft" ] && rm -rf "/lib/clash/chnroute.nft"
      mv /tmp/nftables/chnroute.nft /lib/clash/chnroute.nft
      rm -rf /tmp/nftables
    else
      echo -e "${red}Failed to download Nftables CN_IP${end}"
      exit 1
    fi
}

install_cron() {
    cat << EOF > /var/spool/cron/crontabs/root
0 5 * * * aioclash check_ver >/dev/null 2>&1 #每天的5点0分更新AIOClash服务版本
EOF
    chmod 777 /var/spool/cron/crontabs/root
    crontab /var/spool/cron/crontabs/root
    /etc/init.d/cron restart  >> /dev/null 2>&1
}

# sed -i '$a\0 6 * * * aioclash restart' /var/spool/cron/crontabs/root
# sed -i  s/'aioclash restart'/'aioclash check_ver'/g  /var/spool/cron/crontabs/root

check_aioclash_ver() {
    new_aioclash_ver=$(wget -qO- ${url_cdn}https://raw.githubusercontent.com/gdfsnhsw/aioclash/main/version | grep version | awk '{print $2}')
    sed -i  's/'version'/'"version ${new_aioclash_ver}"'/g'  ${AIOCLASH_PATH}/version
}

check_clash_ver() {
    new_clash_ver=$(wget -qO- https://api.github.com/repos/Dreamacro/clash/releases/tags/premium | grep '"name": "Premium' | sed -E 's/.*"Premium ([^"]+)".*/\1/')
    # new_clash_ver=$( wget -qO- ${url_cdn}https://raw.githubusercontent.com/gdfsnhsw/aioclash/main/version | grep clash_v | awk '{print $2}')
    # now_clash_ver=$(clash -v | awk '{print $2}')
    sed -i  's/'clash_v'/'"clash_v ${new_clash_ver}"'/g'  ${AIOCLASH_PATH}/version
}

check_mosdns_ver() {
    new_mosdns_ver=$(wget -qO- https://api.github.com/repos/IrineSistiana/mosdns/releases/latest | grep '"tag_name": ' | sed -E 's/.*"([^"]+)".*/\1/' | head -n 1)
    # new_mosdns_ver=$(wget -qO- ${url_cdn}https://raw.githubusercontent.com/gdfsnhsw/aioclash/main/version | grep mosdns_v | awk '{print $2}')
    # now_mosdns_ver=$(mosdns -v | awk '{print $1}'| cut -d'-' -f1)
    sed -i  's/'mosdns_v'/'"mosdns_v ${new_mosdns_ver}"'/g'  ${AIOCLASH_PATH}/version
}

check_subconverter_ver() {
    new_subconverter_ver=$(wget -qO- https://api.github.com/repos/tindy2013/subconverter/releases/latest | grep '"name": ' | sed -E 's/.*"([^"]+)".*/\1/' | head -n 1)
    # new_subconverter_ver=$(wget -qO- ${url_cdn}https://raw.githubusercontent.com/gdfsnhsw/aioclash/main/version | grep subconverter_v | awk '{print $2}')
    sed -i  's/'subconverter_v'/'"subconverter_v ${new_subconverter_ver}"'/g'  ${AIOCLASH_PATH}/version
}

check_ver() {
    update_shell  
    check_aioclash_ver
    check_clash_ver
    check_mosdns_ver
    check_subconverter_ver
}

check_clash_status2() {
    pIDa=`lsof -i :9090|grep -v "PID" | awk '{print $2}'`
    if [ "$pIDa" = "" ];then
      return 1
    else
      return 0
    fi
}

check_ping_status() {
    ping -q -c5 ${gateway} >> /dev/null 2>&1
    if [ $? -eq 0 ];then
      return 0
    else
      return 1
    fi
}

ping_service() {
    check_clash_status2
    if [ $? -eq 0 ];then
      echo `date +%F\ %T`  "检测Clash端口正常" >> /dev/null 2>&1
    else
      echo `date +%F\ %T`  "检测Clash端口不正常，正在重启服务!" >>/tmp/ping.log
      aioclash restart
    fi
    check_ping_status
    if [ $? -eq 0 ];then
      echo `date +%F\ %T`  "测试${gateway}网关正常" >> /dev/null 2>&1
    else
      echo `date +%F\ %T`  "测试${gateway}网关不正常，正在重启网络服务!" >>/tmp/ping.log
    /etc/init.d/networking restart
    aioclash restart
    fi
}

update_config () {
    update_clash_config
    update_mosdns_config
    update_cn_ip
    # update_subconverter_config
}

update_clash_config () {
    download_clash_Country
    restart_clash
}

update_mosdns_config () {
    download_mosdns_config
    download_mosdns_geoip
    download_geosite_geoip
    restart_mosdns
}

update_cn_ip () {
    download_cn_ip
}

# update_subconverter_config () {
#     download_subconverter_all_base
#     download_subconverter_Loyalsoldier
#     download_subconverter_yuanlam
#     download_subconverter_ShellClash_Full
#     download_subconverter_LM-Firefly
#     restart_subconverter
# }

install() {
    getcpucore
    getcpucore2
    getcpucore3
    check_clash_status2    
    if [[ $? == 0 ]]; then
      echo -e "${green}AIOClash已安装${end}"
      exit 1
    else
      echo -----------------------------------------------    
      echo -e "${green}欢迎安装AIOClash${end}"
      echo -e "${green}按照提示输入IP,网关,DNS${end}"
      check_disk_status
      echo -----------------------------------------------
      config_ip_dns
      config_base
      # update_shell
      install_debian
      install_subconverter
      install_clash
      install_mosdns
      supervisor_config    
      install_nftables_cn
      install_cron
      echo "version ${sh_ver}" >> ${AIOCLASH_PATH}/version
      echo -----------------------------------------------
      echo -e "${green}AIOClash 安装成功${end}"
      echo -e "${green}Clash配置文件:${yaml_path}${end}"
      echo -e "${green}Clash控制面板:http://${ip_add}:9090/ui/${end}"
      echo -----------------------------------------------
      reboot_show_menu
    fi  
}

getipv4(){
    ipv4=$(wget -qO- -4 -t1 -T2 members.3322.org/dyndns/getip)
    # IP_address=$(wget -qO- -t1 -T2 http://freeapi.ipip.net/${ipv4}|sed 's/\"//g;s/,//g;s/\[//g;s/\]//g')
    if [[ -z "${ipv4}" ]]; then
      ipv4=$(wget -qO- -4 -t1 -T2 api.ip.sb/ip)
      #IP_address=$(wget -qO- -t1 -T2 http://freeapi.ipip.net/${ipv4}|sed 's/\"//g;s/,//g;s/\[//g;s/\]//g')
      if [[ -z "${ipv4}" ]]; then
        ipv4=$(wget -qO- -4 -t1 -T2 members.3322.org/dyndns/getip)
        #IP_address=$(wget -qO- -t1 -T2 http://freeapi.ipip.net/${ipv4}|sed 's/\"//g;s/,//g;s/\[//g;s/\]//g')
        if [[ -z "${ipv4}" ]]; then
          ipv4="IPv4_Error"
        fi
      fi
    fi
}

get_IP_address(){
    if [[ ! -z ${ipv4} ]]; then
      for((integer_1 = ${user_IP_total}; integer_1 >= 1; integer_1--))
      do
        IP=$(echo "${ipv4}" |sed -n "$integer_1"p)
        IP_address=$(wget -qO- -t1 -T2 http://freeapi.ipip.net/${ipv4}|sed 's/\"//g;s/,//g;s/\[//g;s/\]//g')
        echo -e "${green}${ipv4} (${IP_address})"
        sleep 1s
      done
    fi
}

before_show_menu() {
    echo -n -e "${yellow}按回车返回主菜单!${end}" && read temp
    show_menu
}

reboot_show_menu() {
    echo -n -e "${yellow}按回车重启系统!${end}"  && read temp 
    reboot          
}

restart_clash() {
    supervisorctl restart clash >> /dev/null 2>&1
    sleep 2
    check_clash_status
    if [[ $? == 0 ]]; then
      echo -e "${green}Clash服务重启成功!${end}"
    else
      echo -e "${red}Clash服务重启失败!${end}"
    fi
    if [[ $# == 0 ]]; then
      before_show_menu
    fi
}

restart_mosdns() {
    supervisorctl restart mosdns >> /dev/null 2>&1
    sleep 2
    check_mosdns_status
    if [[ $? == 0 ]]; then
      echo -e "${green}Mosdns服务重启成功!${end}"
    else
      echo -e "${red}Mosdns服务重启失败!${end}"
    fi
    if [[ $# == 0 ]]; then
      before_show_menu
    fi
}

restart_subconverter() {
    supervisorctl restart subconverter >> /dev/null 2>&1
    sleep 2
    check_subconverter_status
    if [[ $? == 0 ]]; then
      echo -e "${green}Subconverter服务重启成功!${end}"
    else
      echo -e "${red}Subconverter服务重启失败!${end}"
    fi
    if [[ $# == 0 ]]; then
      before_show_menu
    fi
}

status() {
    supervisorctl status clash
    if [[ $# == 0 ]]; then
    before_show_menu
    fi
}

restart_all() {
    supervisorctl restart clash >> /dev/null 2>&1
    supervisorctl restart mosdns >> /dev/null 2>&1
    supervisorctl restart subconverter >> /dev/null 2>&1
    echo -e "${green}AIOClash 重启成功!${end}"
}

check_install() {
    check_clash_status2    
    if [[ $? != 0 ]]; then
      echo -e "${green}AIOClash未安装，请先安装再使用AIOClash!"
      exit 1
    fi
}

check_clash_status() {
    temp=$(supervisorctl status clash | awk '{print $2}' | cut -d "(" -f2 | cut -d ")" -f1)
    if [[ x"${temp}" == x"RUNNING" ]]; then
      return 0
    else
      return 1
    fi
}

check_mosdns_status() {
    temp=$(supervisorctl status mosdns | awk '{print $2}' | cut -d "(" -f2 | cut -d ")" -f1)
    if [[ x"${temp}" == x"RUNNING" ]]; then
      return 0
    else
      return 1
    fi
}

check_subconverter_status() {
    temp=$(supervisorctl status subconverter | awk '{print $2}' | cut -d "(" -f2 | cut -d ")" -f1)
    if [[ x"${temp}" == x"RUNNING" ]]; then
      return 0
    else
      return 1
    fi
}

check_disk_status() {
    echo -e "${yellow}剩余空间:${end} $(df -h /srv | awk '{print $4}' | sed 1d )${yellow}    架构:${end} ${cpucore}" 

}

errornum(){
    echo -----------------------------------------------
    echo -e "\033[31m请输入正确的数字!\033[0m"
}

clashrestart(){
    echo -----------------------------------------------
      read -e -p "是否重启clash？[1/0] > " res
    if [ "$res" = '1' ]; then
      supervisorctl restart clash 
    elif [ "$res" = '0' ]; then
      show_menu
    fi
}

getudp(){
    echo -----------------------------------------------
      read -e -p "是否开启udp？[1/0] > " res
    if [ "$res" = '1' ]; then
      sed -i '/udp=*/'d $formyairport_path
      setconfig udp true  
    elif [ "$res" = '0' ]; then
      sed -i '/udp=*/'d $formyairport_path
      setconfig udp false
    else
      errornum
      getudp
  fi
}

linkconfig(){
  echo -----------------------------------------------
  echo 1  AIO_简单代理集版
  echo 2  AIO
  echo 3  AIO_无测速版
  echo 4  LM-Firefly
  echo 5  ShellClash增强版
  echo -----------------------------------------------
  echo 0  返回上级菜单
  echo -----------------------------------------------
  read -e -p "请输入对应数字[1-4] > " num
  if [ "$num" = 1 ];then
    mkyamlbak
    set_clash_config
    supervisorctl restart clash
    while true; do
        ip link show utun  >> /dev/null 2>&1
        [ $? -eq 0 ] && break
        echo -e "\033[32m正在启动clash，请等待...\033[0m"
        sleep 3
    done
    echo -e "\033[32mClash服务启动成功!\033[0m"
    echo -e "${green}Clash代理集配置文件:${yaml_path}${end}"
  elif [ "$num" = 2 ];then
    sed -i '/config=*/'d $formyairport_path
    setconfig config ${url_cdn}https://raw.githubusercontent.com/gdfsnhsw/aioclash/main/subconverter/AIO.ini
    getyaml
  elif [ "$num" = 3 ];then
    sed -i '/config=*/'d $formyairport_path
    setconfig config ${url_cdn}https://raw.githubusercontent.com/gdfsnhsw/aioclash/main/subconverter/AIO_NoAuto.ini
    getyaml
  elif [ "$num" = 4 ];then
    sed -i '/config=*/'d $formyairport_path
    setconfig config ${url_cdn}https://raw.githubusercontent.com/gdfsnhsw/aioclash/main/subconverter/LM-Firefly.ini
    getyaml
  elif [ "$num" = 5 ];then
    sed -i '/config=*/'d $formyairport_path
    setconfig config ${url_cdn}https://raw.githubusercontent.com/gdfsnhsw/aioclash/main/subconverter/ShellClash_Full.ini
    getyaml
  elif [ "$num" = 0 ];then
    getlink_menu
  else
    errornum
    linkconfig        
  fi
}

getlink(){
    echo -----------------------------------------------
    echo -e "\033[44m如果你需要将多个订阅合成一份, 使用 '|' 来分隔链接, 可以按以下操作:\033[0m"
    echo -e "\033[33mhttps://dler.cloud/aaa|trojan://密码@域名:443#名称\033[0m"
    echo -----------------------------------------------
    read -e -p "请输入完整链接 > " link
    test=$(echo $link | grep "://")
    if [ -n "$link" -a -n "$test" ];then
      echo -----------------------------------------------
      echo -e 请检查输入的链接是否正确:
      echo -e "\033[32m$link\033[0m"
      echo -----------------------------------------------
      read -e -p "确认导入订阅链接？[1/0] > " res
        if [ "$res" = '1' ]; then
          mkyamlbak
          sed -i '/url=*/'d $formyairport_path
          setconfig url $link
          getudp
          echo -----------------------------------------------
          echo -e   "\033[44m添加订阅链接完成\033[0m"
        elif [ "$res" = '0' ]; then
          getlink
        else
          errornum
        fi
    else
      echo -----------------------------------------------
      echo -e "\033[31m请输入正确的订阅链接地址!!!\033[0m"
      sleep 1
    fi
}

mkyamlbak(){
    if [ ! -f "$yaml_path" ];then
    cat << EOF > /tmp/config.yaml
mixed-port: 7890
EOF
    mv /tmp/config.yaml $yaml_path 
    fi
    cp -r $yaml_path $bak_yaml_path
    cp -r $formyairport_path $bak_formyairport_path
}

keepyaml(){
    if [ -s $new_yaml_path  ];then
      cp -r $new_yaml_path $yaml_path
      echo -e "\033[32m已成功获取配置文件!\033[0m"
      rm -rf $new_yaml_path
      supervisorctl restart clash
      PID=$(pidof clash)
        if [ -f "$PID" ];then
          echo -----------------------------------------------
          echo -e "\033[32mclash启动失败，还原配置文件!\033[0m"
          cp -r $bak_yaml_path $yaml_path
          cp -r $bak_formyairport_path $formyairport_path
          supervisorctl restart clash
        else
          echo -----------------------------------------------
          while true; do
            ip link show utun  >> /dev/null 2>&1
            [ $? -eq 0 ] && break
            echo -e "\033[32m正在启动clash，请等待...\033[0m"
            sleep 3
          done
          echo -e "\033[32mClash服务启动成功!\033[0m"
          echo -e "Clash控制面板:\033[36;4mhttp://${local_ip}:9090/ui/\033[0m"
          echo -----------------------------------------------
          before_show_menu
        fi
    else
      echo -----------------------------------------------
      echo -e "\033[32m创建配置文件失败!\033[0m"
      echo -----------------------------------------------
      rm -rf $new_yaml_path 
      show_menu
    fi
}

getyaml(){
    mkyamlbak  
    echo -e "\033[32m正在创建配置文件\033[0m"
    echo -----------------------------------------------
    webget2 $new_yaml_path "http://127.0.0.1:25500/getprofile?name=profiles/formyairport.ini&token=password"
    keepyaml
}

clashcron(){
    setcron(){
      setcrontab(){
        #设置具体时间
        echo -----------------------------------------------
        read -e -p "请输入小时（0-23） > " num
        if [ -z "$num" ]; then 
          errornum
          setcron
        elif [ $num -gt 23 ] || [ $num -lt 0 ]; then 
          errornum
          setcron
        else  
          hour=$num
          echo -----------------------------------------------
          read -e -p "请输入分钟（0-59） > " num
          if [ -z "$num" ]; then 
            errornum
            setcron
          elif [ $num -gt 59 ] || [ $num -lt 0 ]; then 
            errornum
            setcron
          else  
            min=$num
              echo -----------------------------------------------
              echo 将在$week1的$hour点$min分$cronname（旧的任务会被覆盖）
              read -e -p  "是否确认添加定时任务？(1/0) > " res
              if [ "$res" = '1' ]; then
                cronwords="$min $hour * * $week $cronset >/dev/null 2>&1 #$week1的$hour点$min分$cronname"
                crontab -l > /tmp/conf
                sed -i "/$cronname/d" /tmp/conf
                sed -i '/^$/d' /tmp/conf
                echo "$cronwords" >> /tmp/conf && crontab /tmp/conf
                rm -f /tmp/conf
                echo -----------------------------------------------
                echo -e "\033[31m定时任务已添加!!!\033[0m"
              fi
          fi      
        fi
      }
      echo -----------------------------------------------
      echo -e " 正在设置:\033[32m$cronname\033[0m定时任务"
      echo -e " 输入  1~7  对应\033[33m每周的指定某天\033[0m运行"
      echo -e " 输入   8   设为\033[33m每天\033[0m定时运行"
      echo -e " 输入 1,3,6 代表\033[36m指定每周1,3,6\033[0m运行(小写逗号分隔)"
      echo -e " 输入 a,b,c 代表\033[36m指定每周a,b,c\033[0m运行(1<=abc<=7)"
      echo -----------------------------------------------
      echo -e " 输入   9   \033[31m删除定时任务\033[0m"
      echo -e " 输入   0   返回上级菜单"
      echo -----------------------------------------------
      read -e -p "请输入对应数字 > " num
      if [ -z "$num" ]; then 
        errornum
      elif [ "$num" = 0 ]; then
        clashcron
      elif [ "$num" = 9 ]; then
        crontab -l > /tmp/conf && sed -i "/$cronname/d" /tmp/conf && crontab /tmp/conf
        rm -f /tmp/conf
        echo -----------------------------------------------
        echo -e "\033[31m定时任务:$cronname已删除!\033[0m"
      elif [ "$num" = 8 ]; then 
        week='*'
        week1=每天
        echo 已设为每天定时运行!
        setcrontab
      else
        week=$num 
        week1=每周$week
        echo 已设为每周 $num 运行!
        setcrontab
      fi
    }
    #定时任务菜单
    echo -----------------------------------------------
    echo  -e "\033[33m已添加的定时任务:\033[35m"
    crontab -l | grep -oE ' #.*' 
    echo -e "\033[0m"-----------------------------------------------
    echo -e " 1 设置\033[33m定时重启\033[0mClash服务"
    echo -e " 2 设置\033[31m定时停止\033[0mClash服务"
    echo -e " 3 设置\033[32m定时开启\033[0mClash服务"
    echo -e " 4 设置\033[33m定时更新\033[0m订阅并重启服务"
    echo -e " 5 设置\033[34m定时检测\033[0mClash服务端口并重启服务"
    echo -e " 6 设置\033[36m定时更新\033[0mAIOClash服务版本"
    echo -----------------------------------------------
    echo -e " 0 返回上级菜单" 
    echo -----------------------------------------------
    read -e -p "请输入对应数字 > " num
    if [ -z "$num" ]; then 
      errornum
    elif [ "$num" = 0 ]; then
      show_menu
    elif [ "$num" = 1 ]; then
      cronname=重启Clash服务
      cronset="supervisorctl restart clash"
      setcron
      clashcron
    elif [ "$num" = 2 ]; then
      cronname=停止Clash服务
      cronset="supervisorctl stop clash"
      setcron
      clashcron
    elif [ "$num" = 3 ]; then
      cronname=开启Clash服务
      cronset="supervisorctl start clash"
      setcron
      clashcron
    elif [ "$num" = 4 ]; then 
      cronname=更新订阅链接
      cronset="aioclash getyaml"
      setcron 
      clashcron
    elif [ "$num" = 5 ]; then 
      cronname=检测Clash服务端口
      # cronset="aioclash ping"
      # setcron 
      echo -----------------------------------------------
      echo -e " 输入   1   确认设置:\033[32m$cronname\033[0m定时任务"
      echo -----------------------------------------------
      echo -e " 输入   9   \033[31m删除定时任务\033[0m"
      echo -e " 输入   0   返回上级菜单"
      echo -----------------------------------------------
      read -e -p "请输入对应数字 > " num
      if [ -z "$num" ]; then 
        errornum
      elif [ "$num" = 1 ]; then
        sed -i '$a\*/5 * * * * aioclash ping >/dev/null 2>&1 #每5分钟检测Clash服务端口' /var/spool/cron/crontabs/root
      elif [ "$num" = 9 ]; then
        crontab -l > /tmp/conf && sed -i "/$cronname/d" /tmp/conf && crontab /tmp/conf
        rm -f /tmp/conf
        echo -----------------------------------------------
        echo -e "\033[31m定时任务:$cronname已删除!\033[0m"
      fi
      clashcron
    elif [ "$num" = 6 ]; then 
      cronname=更新AIOClash服务版本
      cronset="aioclash check_ver"
      setcron 
      clashcron
    else
      errornum
    fi
}

show_usage() {
    echo -e "${blueb}AIOClash 管理脚本${end}       版本: ${sh_ver}  "
    echo -----------------------------------------------
    echo -e "${green}aioclash                      - 显示管理菜单${end}"
    echo -e "${green}aioclash install              - 安装 AIOClash${end}"    
    echo -e "${green}aioclash restart_clash        - 重启 Clash${end}"
    echo -e "${green}aioclash restart_mosdns       - 重启 Mosdns${end}"
    echo -e "${green}aioclash restart_subconverter - 重启 Subconverter${end}"
    echo -e "${green}aioclash restart              - 重启 AIOClash${end}"
    echo -e "${green}aioclash status               - 查看运行状态${end}"
    echo -e "${green}aioclash logs                 - 查看 Clash 日志${end}"    
    echo -e "${green}aioclash update_kernel        - 更新 Debian 内核${end}"
    echo -e "${green}aioclash update_clash         - 更新 Clash${end}"
    echo -e "${green}aioclash update_mosdns        - 更新 Mosdns${end}"
    # echo -e "${green}aioclash update_subconverter  - 更新 Subconverter${end}"
    echo -e "${green}aioclash update_config        - 更新 AIOClash配置${end}"
    echo -e "${green}aioclash update               - 更新 AIOClash 管理脚本${end}"
    echo -----------------------------------------------
}

clash_getconfig(){
    PID=$(pidof clash)
    if [ -n "$PID" ];then
      check_clash_status2
      if [ $? -eq 0 ];then
      run="\033[32m已运行\033[0m"
      VmRSS=$(cat /proc/$PID/status|grep -w VmRSS|awk '{print $2,$3}')
      time=$(supervisorctl status clash | awk '{print $6,$7,$8}')
      echo -e "Clash       "$run":\033[0;34m"$time"\033[0m,内存占用:\033[0;34m"$VmRSS"\033[0m"
      else
      run="\033[31m请检查或导入配置文件\033[0m"
      echo -e "Clash       "$run""
      fi
    else
      run="\033[31m没有运行\033[0m"
      echo -e "Clash       "$run""
    fi
}

mosdns_getconfig(){
    PID=$(pidof mosdns)
    if [ -n "$PID" ];then
      run="\033[32m已运行\033[0m"
      VmRSS=$(cat /proc/$PID/status|grep -w VmRSS|awk '{print $2,$3}')
      time=$(supervisorctl status mosdns | awk '{print $6,$7,$8}')
      echo -e "Mosdns      "$run":\033[0;34m"$time"\033[0m,内存占用:\033[0;34m"$VmRSS"\033[0m"
    else
      run="\033[31m没有运行\033[0m"
      echo -e "Mosdns      "$run""
    fi
}

subconverter_getconfig(){
    PID=$(pidof subconverter)
    if [ -n "$PID" ];then
      run="\033[32m已运行\033[0m"
      VmRSS=$(cat /proc/$PID/status|grep -w VmRSS|awk '{print $2,$3}')
      time=$(supervisorctl status subconverter | awk '{print $6,$7,$8}')
      echo -e "Subconverter"$run":\033[0;34m"$time"\033[0m,内存占用:\033[0;34m"$VmRSS"\033[0m"
        
    else
      run="\033[31m没有运行\033[0m"
      echo -e "Subconverter"$run""
    fi
}

getconfig(){
    getcpucore
    echo -----------------------------------------------
    echo -e "\033[30;46m欢迎使用All In One Clash!\033[0m      版本:${sh_ver}"
    check_disk_status
    clash_getconfig
    mosdns_getconfig
    subconverter_getconfig
    echo -e "Clash控制面板:\033[36;4mhttp://${local_ip}:9090/ui/\033[0m"
    echo -----------------------------------------------
}

show_menu() {
    getconfig
    echo -e "1. ${green}重启 ${end}Clash"
    echo -e "2. ${green}重启 ${end}Mosdns"
    echo -e "3. ${green}重启 ${end}Subconverter"
    echo -----------------------------------------------
    echo -e "4. ${green}导入 ${end}配置文件"
    echo -e "5. ${green}设置 ${end}定时"
    echo -----------------------------------------------
    echo -e "6. ${green}重启 ${end}AIOClash"
    echo -e "7. ${green}设置 ${end}AIOClash"
    echo -e "8. ${green}更新/卸载${end} AIOClash"
    echo -----------------------------------------------
    echo -e "q. 退出脚本"
    echo -----------------------------------------------
    echo && read -e -p "请输入选择 [1-8]: " num

    case "${num}" in
      1)  restart_clash
          before_show_menu
    ;;
      2)  restart_mosdns
          before_show_menu
    ;;
      3)  restart_subconverter
          before_show_menu
    ;;
      4)  getlink_menu
    ;;   
      5)  clashcron
    ;;   
      6)  restart_all
          before_show_menu   
    ;;
      7)  setup_menu      
    ;;      
      8)  update_menu 
    ;; 
      q)  exit 1
    ;;     
      *)  errornum
          before_show_menu
    ;;
    esac
}

getlink_menu() {
    echo -----------------------------------------------
    echo -e "\033[30;43m欢迎使用导入配置文件菜单\033[0m"
    echo -----------------------------------------------
    echo -e "1. ${green}添加 ${end}订阅链接"
    echo -e "2. ${green}选择 ${end}配置模版"
    echo -----------------------------------------------
    echo -e "0. 返回上级菜单"
    echo -----------------------------------------------
    echo && read -e -p "请输入选择 [1-2]: " num
    case "${num}" in
      1)  getlink
          getlink_menu
    ;;
      2)  linkconfig
          getlink_menu
    ;;
      0)  show_menu
    ;;
      *)  errornum
          getlink_menu
    ;;
    esac
}

setup_menu() {
    echo -----------------------------------------------
    echo -e "\033[30;43m欢迎使用功能设置菜单\033[0m"
    echo -----------------------------------------------
    getipv4
    echo -e "${yellow}Internet:   ${end}${ipv4}"
    echo -e "${yellow}address:    ${end}${local_ip}"
    echo -e "${yellow}netmask:    ${end}${netmask}"
    echo -e "${yellow}gateway:    ${end}${gateway}"
    echo -----------------------------------------------
    echo -e "1. ${green}日志 ${end}Clash"
    echo -e "2. ${green}更改 ${end}本机地址"
    echo -----------------------------------------------
    echo -e "0. 返回上级菜单"
    echo -----------------------------------------------
    echo && read -e -p "请输入选择 [1-2]: " num
    case "${num}" in
      1)  tail -f /tmp/clash.log 
    ;;
      2)  config_ip_dns
          reboot_show_menu 
    ;;
      0)  show_menu
    ;;
      *)  errornum
          setup_menu
    ;;
    esac

}

update_menu() {
    echo -e "${green}正在检查更新...${end}"
    rm -rf ${AIOCLASH_PATH}/version
    cat << EOF > ${AIOCLASH_PATH}/version
version 
clash_v 
mosdns_v 
subconverter_v 
EOF
    check_ver
    new_clash_version=$(cat ${AIOCLASH_PATH}/version  | grep clash_v | awk '{print $2}'| cut -d'-' -f1)
    new_mosdns_version=$(cat ${AIOCLASH_PATH}/version  | grep mosdns_v | awk '{print $2}'| cut -d'-' -f1)
    new_subconverter_version=$(cat ${AIOCLASH_PATH}/version  | grep subconverter_v | awk '{print $2}'| cut -d'-' -f1)
    new_aioclash_version=$(cat ${AIOCLASH_PATH}/version  | grep version | awk '{print $2}'| cut -d'-' -f1)
    echo -----------------------------------------------
    echo -e "\033[30;43m欢迎使用更新/卸载功能\033[0m"
    echo -----------------------------------------------
    echo -e "1. ${green}更新 ${end}AIOClash      ${yellow}${sh_ver}${end}      >  ${lightblue}${new_aioclash_version}${end}"
    echo -e "2. ${green}更新 ${end}Clash:        ${yellow}$(clash -v | awk '{print $2}')${end} >  ${lightblue}${new_clash_version}${end}"
    echo -e "3. ${green}更新 ${end}Mosdns:       ${yellow}$(mosdns -v | awk '{print $1}'| cut -d'-' -f1)${end}     >  ${lightblue}${new_mosdns_version}${end}"
    echo -e "4. ${green}更新 ${end}Subconverter  ${yellow}v$(cat ${subconverter_version_file})${end}     >  ${lightblue}${new_subconverter_version}${end}" 
    echo -e "5. ${green}更新 ${end}Clash配置"
    echo -e "6. ${green}更新 ${end}Mosdns配置"
    echo -e "7. ${green}更新 ${end}CN_IP文件"
    echo -----------------------------------------------
    echo -e "8. ${red}卸载 ${end}AIOClash"
    echo -----------------------------------------------
    echo -e "0. 返回上级菜单"
    echo -----------------------------------------------
    echo && read -e -p "请输入选择 [1-8]: " num

    case "${num}" in
      1)  update_shell_y
          before_show_menu
    ;;
      2)  update_clash_y
          before_show_menu
    ;;                
      3)  update_mosdns_y
          before_show_menu
    ;;
      4)  update_subconverter_y
          before_show_menu
    ;;                   
      5)  update_clash_config
          before_show_menu
    ;;
      6)  update_mosdns_config
          before_show_menu
    ;;
      7)  update_cn_ip
          before_show_menu
    ;;
      8)  uninstall
    ;;
      0)  show_menu
    ;;             
      *)  errornum
          update_menu
    ;;
    esac
}

uninstall() {
    echo -----------------------------------------------
      read -e -p "确认卸载AIOClash？（警告:该操作不可逆!）[1/0] > " res
    if [ "$res" = '1' ]; then
    supervisorctl stop clash >> /dev/null 2>&1
    rm -rf /etc/supervisor/conf.d/clash.conf
    rm -rf ${clash_bin}
    rm -rf ${CLASH_PATH}
    rm -rf /tmp/clash.log

    supervisorctl stop mosdns >> /dev/null 2>&1
    rm -rf /etc/supervisor/conf.d/mosdns.conf
    rm -rf ${mosdns_bin}
    rm -rf ${MOSDNS_PATH}
    rm -rf /tmp/mosdns.log

    supervisorctl stop subconverter >> /dev/null 2>&1
    rm -rf /etc/supervisor/conf.d/subconverter.conf
    rm -rf ${subconverter_bin}
    rm -rf ${SUBCONVERTER_PATH}
    rm -rf /tmp/subconverter.log

    # rm -rf /etc/supervisor/supervisord.conf

    rm -rf /lib/clash

    rm -rf ${AIOCLASH_PATH}/version
    rm -rf ${aioclash_path}

    cronset "Clash服务"
    cronset "订阅链接"

    echo -e "${red}AIOClash 卸载成功!请手动重启系统${end}"
    exit 0
    elif [ "$res" = '0' ]; then
      update_menu
    fi
}


if [[ $# > 0 ]]; then
    case $1 in
      "update_clash") update_clash_y 0 
    ;;
      "update_mosdns") update_mosdns_y 0 
    ;;
      "update_subconverter") update_subconverter_y 0 
    ;;
      "restart_clash") restart_clash 0
    ;;
      "restart_mosdns") restart_mosdns 0
    ;;
      "restart_subconverter") restart_subconverter 0
    ;;
      "restart") restart_all 0
    ;;        
      "logs") tail -f /tmp/clash.log 0
    ;;   
      "ping") ping_service 0
    ;; 
      "install") install 0
    ;;
      "install_ping") update_shell &&install_cron 0
    ;;                  
      "status") show_status 0
    ;;
      "check_ver") check_ver 0
    ;;              
      "update_clash_config") update_clash_config 0
    ;;
      "update_mosdns_config") update_mosdns_config 0
    ;;
    #   "update_subconverter_config") update_subconverter_config 0
    # ;;
      "update_config") update_config 0
    ;;                   
      "update") update_shell 0
    ;;
      "update_y") update_shell_y 0
    ;;  
      "uninstall") uninstall 0
    ;;   
      "getyaml") getyaml 0
    ;;                       
      *) show_usage   
    ;;
    esac
else
      show_menu
fi
